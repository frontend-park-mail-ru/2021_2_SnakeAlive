/*!

 handlebars v3.0.1

Copyright (C) 2011-2014 by Yehuda Katz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

@license
*/
!(function (a, b) {
	typeof define === 'function' && define.amd
		? define([], b)
		: typeof exports === 'object'
		? (module.exports = b())
		: (a.Handlebars = b());
})(this, () => {
	const a = (function () {
		function a(a) {
			return i[a];
		}
		function b(a) {
			for (let b = 1; b < arguments.length; b++)
				for (const c in arguments[b])
					Object.prototype.hasOwnProperty.call(arguments[b], c) && (a[c] = arguments[b][c]);
			return a;
		}
		function c(a, b) {
			for (let c = 0, d = a.length; d > c; c++) if (a[c] === b) return c;
			return -1;
		}
		function d(b) {
			if (typeof b !== 'string') {
				if (b && b.toHTML) return b.toHTML();
				if (b == null) return '';
				if (!b) return `${b}`;
				b = `${b}`;
			}
			return k.test(b) ? b.replace(j, a) : b;
		}
		function e(a) {
			return a || a === 0 ? (n(a) && a.length === 0 ? !0 : !1) : !0;
		}
		function f(a, b) {
			return (a.path = b), a;
		}
		function g(a, b) {
			return (a ? `${a}.` : '') + b;
		}
		const h = {};
		var i = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#x27;', '`': '&#x60;' };
		var j = /[&<>"'`]/g;
		var k = /[&<>"'`]/;
		h.extend = b;
		const l = Object.prototype.toString;
		h.toString = l;
		var m = function (a) {
			return typeof a === 'function';
		};
		m(/x/) &&
			(m = function (a) {
				return typeof a === 'function' && l.call(a) === '[object Function]';
			});
		var m;
		h.isFunction = m;
		var n =
			Array.isArray ||
			function (a) {
				return a && typeof a === 'object' ? l.call(a) === '[object Array]' : !1;
			};
		return (
			(h.isArray = n),
			(h.indexOf = c),
			(h.escapeExpression = d),
			(h.isEmpty = e),
			(h.blockParams = f),
			(h.appendContextPath = g),
			h
		);
	})();
	const b = (function () {
		function a(a, b) {
			let d;
			let e;
			const f = b && b.loc;
			f && ((d = f.start.line), (e = f.start.column), (a += ` - ${d}:${e}`));
			for (let g = Error.prototype.constructor.call(this, a), h = 0; h < c.length; h++)
				this[c[h]] = g[c[h]];
			f && ((this.lineNumber = d), (this.column = e));
		}
		let b;
		var c = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];
		return (a.prototype = new Error()), (b = a);
	})();
	const c = (function (a, b) {
		function c(a, b) {
			(this.helpers = a || {}), (this.partials = b || {}), d(this);
		}
		function d(a) {
			a.registerHelper('helperMissing', function () {
				if (arguments.length === 1) return void 0;
				throw new g(`Missing helper: '${arguments[arguments.length - 1].name}'`);
			}),
				a.registerHelper('blockHelperMissing', function (b, c) {
					const d = c.inverse;
					const e = c.fn;
					if (b === !0) return e(this);
					if (b === !1 || b == null) return d(this);
					if (k(b))
						return b.length > 0 ? (c.ids && (c.ids = [c.name]), a.helpers.each(b, c)) : d(this);
					if (c.data && c.ids) {
						const g = q(c.data);
						(g.contextPath = f.appendContextPath(c.data.contextPath, c.name)), (c = { data: g });
					}
					return e(b, c);
				}),
				a.registerHelper('each', function (a, b) {
					function c(b, c, g) {
						d &&
							((d.key = b),
							(d.index = c),
							(d.first = c === 0),
							(d.last = !!g),
							e && (d.contextPath = e + b)),
							(m += h(a[b], { data: d, blockParams: f.blockParams([a[b], b], [e + b, null]) }));
					}
					if (!b) throw new g('Must pass iterator to #each');
					let d;
					let e;
					var h = b.fn;
					const i = b.inverse;
					let j = 0;
					var m = '';
					if (
						(b.data && b.ids && (e = `${f.appendContextPath(b.data.contextPath, b.ids[0])}.`),
						l(a) && (a = a.call(this)),
						b.data && (d = q(b.data)),
						a && typeof a === 'object')
					)
						if (k(a)) for (let n = a.length; n > j; j++) c(j, j, j === a.length - 1);
						else {
							let o;
							for (const p in a) a.hasOwnProperty(p) && (o && c(o, j - 1), (o = p), j++);
							o && c(o, j - 1, !0);
						}
					return j === 0 && (m = i(this)), m;
				}),
				a.registerHelper('if', function (a, b) {
					return (
						l(a) && (a = a.call(this)),
						(!b.hash.includeZero && !a) || f.isEmpty(a) ? b.inverse(this) : b.fn(this)
					);
				}),
				a.registerHelper('unless', function (b, c) {
					return a.helpers.if.call(this, b, { fn: c.inverse, inverse: c.fn, hash: c.hash });
				}),
				a.registerHelper('with', function (a, b) {
					l(a) && (a = a.call(this));
					const c = b.fn;
					if (f.isEmpty(a)) return b.inverse(this);
					if (b.data && b.ids) {
						const d = q(b.data);
						(d.contextPath = f.appendContextPath(b.data.contextPath, b.ids[0])), (b = { data: d });
					}
					return c(a, b);
				}),
				a.registerHelper('log', (b, c) => {
					const d = c.data && c.data.level != null ? parseInt(c.data.level, 10) : 1;
					a.log(d, b);
				}),
				a.registerHelper('lookup', (a, b) => a && a[b]);
		}
		const e = {};
		var f = a;
		var g = b;
		const h = '3.0.1';
		e.VERSION = h;
		const i = 6;
		e.COMPILER_REVISION = i;
		const j = {
			1: '<= 1.0.rc.2',
			2: '== 1.0.0-rc.3',
			3: '== 1.0.0-rc.4',
			4: '== 1.x.x',
			5: '== 2.0.0-alpha.x',
			6: '>= 2.0.0-beta.1',
		};
		e.REVISION_CHANGES = j;
		var k = f.isArray;
		var l = f.isFunction;
		const m = f.toString;
		const n = '[object Object]';
		(e.HandlebarsEnvironment = c),
			(c.prototype = {
				constructor: c,
				logger: o,
				log: p,
				registerHelper(a, b) {
					if (m.call(a) === n) {
						if (b) throw new g('Arg not supported with multiple helpers');
						f.extend(this.helpers, a);
					} else this.helpers[a] = b;
				},
				unregisterHelper(a) {
					delete this.helpers[a];
				},
				registerPartial(a, b) {
					if (m.call(a) === n) f.extend(this.partials, a);
					else {
						if (typeof b === 'undefined')
							throw new g('Attempting to register a partial as undefined');
						this.partials[a] = b;
					}
				},
				unregisterPartial(a) {
					delete this.partials[a];
				},
			});
		var o = {
			methodMap: { 0: 'debug', 1: 'info', 2: 'warn', 3: 'error' },
			DEBUG: 0,
			INFO: 1,
			WARN: 2,
			ERROR: 3,
			level: 1,
			log(a, b) {
				if (typeof console !== 'undefined' && o.level <= a) {
					const c = o.methodMap[a];
					(console[c] || console.log).call(console, b);
				}
			},
		};
		e.logger = o;
		var p = o.log;
		e.log = p;
		var q = function (a) {
			const b = f.extend({}, a);
			return (b._parent = a), b;
		};
		return (e.createFrame = q), e;
	})(a, b);
	const d = (function () {
		function a(a) {
			this.string = a;
		}
		let b;
		return (
			(a.prototype.toString = a.prototype.toHTML =
				function () {
					return `${this.string}`;
				}),
			(b = a)
		);
	})();
	const e = (function (a, b, c) {
		function d(a) {
			const b = (a && a[0]) || 1;
			const c = n;
			if (b !== c) {
				if (c > b) {
					const d = o[c];
					const e = o[b];
					throw new m(
						`Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version (${d}) or downgrade your runtime to an older version (${e}).`
					);
				}
				throw new m(
					`Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version (${a[1]}).`
				);
			}
		}
		function e(a, b) {
			if (!b) throw new m('No environment passed to template');
			if (!a || !a.main) throw new m(`Unknown template object: ${typeof a}`);
			b.VM.checkRevision(a.compiler);
			const c = function (c, d, e) {
				e.hash && (d = l.extend({}, d, e.hash)), (c = b.VM.resolvePartial.call(this, c, d, e));
				let f = b.VM.invokePartial.call(this, c, d, e);
				if (
					(f == null &&
						b.compile &&
						((e.partials[e.name] = b.compile(c, a.compilerOptions, b)),
						(f = e.partials[e.name](d, e))),
					f != null)
				) {
					if (e.indent) {
						for (var g = f.split('\n'), h = 0, i = g.length; i > h && (g[h] || h + 1 !== i); h++)
							g[h] = e.indent + g[h];
						f = g.join('\n');
					}
					return f;
				}
				throw new m(
					`The partial ${e.name} could not be compiled when running in runtime-only mode`
				);
			};
			const d = {
				strict(a, b) {
					if (!(b in a)) throw new m(`"${b}" not defined in ${a}`);
					return a[b];
				},
				lookup(a, b) {
					for (let c = a.length, d = 0; c > d; d++) if (a[d] && a[d][b] != null) return a[d][b];
				},
				lambda(a, b) {
					return typeof a === 'function' ? a.call(b) : a;
				},
				escapeExpression: l.escapeExpression,
				invokePartial: c,
				fn(b) {
					return a[b];
				},
				programs: [],
				program(a, b, c, d, e) {
					let g = this.programs[a];
					const h = this.fn(a);
					return (
						b || e || d || c
							? (g = f(this, a, h, b, c, d, e))
							: g || (g = this.programs[a] = f(this, a, h)),
						g
					);
				},
				data(a, b) {
					for (; a && b--; ) a = a._parent;
					return a;
				},
				merge(a, b) {
					let c = a || b;
					return a && b && a !== b && (c = l.extend({}, b, a)), c;
				},
				noop: b.VM.noop,
				compilerInfo: a.compiler,
			};
			var e = function (b, c) {
				c = c || {};
				let f = c.data;
				e._setup(c), !c.partial && a.useData && (f = j(b, f));
				let g;
				const h = a.useBlockParams ? [] : void 0;
				return (
					a.useDepths && (g = c.depths ? [b].concat(c.depths) : [b]),
					a.main.call(d, b, d.helpers, d.partials, f, h, g)
				);
			};
			return (
				(e.isTop = !0),
				(e._setup = function (c) {
					c.partial
						? ((d.helpers = c.helpers), (d.partials = c.partials))
						: ((d.helpers = d.merge(c.helpers, b.helpers)),
						  a.usePartial && (d.partials = d.merge(c.partials, b.partials)));
				}),
				(e._child = function (b, c, e, g) {
					if (a.useBlockParams && !e) throw new m('must pass block params');
					if (a.useDepths && !g) throw new m('must pass parent depths');
					return f(d, b, a[b], c, 0, e, g);
				}),
				e
			);
		}
		function f(a, b, c, d, e, f, g) {
			const h = function (b, e) {
				return (
					(e = e || {}),
					c.call(
						a,
						b,
						a.helpers,
						a.partials,
						e.data || d,
						f && [e.blockParams].concat(f),
						g && [b].concat(g)
					)
				);
			};
			return (h.program = b), (h.depth = g ? g.length : 0), (h.blockParams = e || 0), h;
		}
		function g(a, b, c) {
			return (
				a ? a.call || c.name || ((c.name = a), (a = c.partials[a])) : (a = c.partials[c.name]), a
			);
		}
		function h(a, b, c) {
			if (((c.partial = !0), void 0 === a)) throw new m(`The partial ${c.name} could not be found`);
			return a instanceof Function ? a(b, c) : void 0;
		}
		function i() {
			return '';
		}
		function j(a, b) {
			return (b && 'root' in b) || ((b = b ? p(b) : {}), (b.root = a)), b;
		}
		const k = {};
		var l = a;
		var m = b;
		var n = c.COMPILER_REVISION;
		var o = c.REVISION_CHANGES;
		var p = c.createFrame;
		return (
			(k.checkRevision = d),
			(k.template = e),
			(k.program = f),
			(k.resolvePartial = g),
			(k.invokePartial = h),
			(k.noop = i),
			k
		);
	})(a, b, c);
	const f = (function (a, b, c, d, e) {
		let f;
		const g = a;
		const h = b;
		const i = c;
		const j = d;
		const k = e;
		const l = function () {
			const a = new g.HandlebarsEnvironment();
			return (
				j.extend(a, g),
				(a.SafeString = h),
				(a.Exception = i),
				(a.Utils = j),
				(a.escapeExpression = j.escapeExpression),
				(a.VM = k),
				(a.template = function (b) {
					return k.template(b, a);
				}),
				a
			);
		};
		const m = l();
		m.create = l;
		const n = typeof global !== 'undefined' ? global : window;
		const o = n.Handlebars;
		return (
			(m.noConflict = function () {
				n.Handlebars === m && (n.Handlebars = o);
			}),
			(m.default = m),
			(f = m)
		);
	})(c, d, b, a, e);
	const g = (function () {
		let a;
		var b = {
			Program(a, b, c, d) {
				(this.loc = d),
					(this.type = 'Program'),
					(this.body = a),
					(this.blockParams = b),
					(this.strip = c);
			},
			MustacheStatement(a, b, c, d, e, f) {
				(this.loc = f),
					(this.type = 'MustacheStatement'),
					(this.path = a),
					(this.params = b || []),
					(this.hash = c),
					(this.escaped = d),
					(this.strip = e);
			},
			BlockStatement(a, b, c, d, e, f, g, h, i) {
				(this.loc = i),
					(this.type = 'BlockStatement'),
					(this.path = a),
					(this.params = b || []),
					(this.hash = c),
					(this.program = d),
					(this.inverse = e),
					(this.openStrip = f),
					(this.inverseStrip = g),
					(this.closeStrip = h);
			},
			PartialStatement(a, b, c, d, e) {
				(this.loc = e),
					(this.type = 'PartialStatement'),
					(this.name = a),
					(this.params = b || []),
					(this.hash = c),
					(this.indent = ''),
					(this.strip = d);
			},
			ContentStatement(a, b) {
				(this.loc = b), (this.type = 'ContentStatement'), (this.original = this.value = a);
			},
			CommentStatement(a, b, c) {
				(this.loc = c), (this.type = 'CommentStatement'), (this.value = a), (this.strip = b);
			},
			SubExpression(a, b, c, d) {
				(this.loc = d),
					(this.type = 'SubExpression'),
					(this.path = a),
					(this.params = b || []),
					(this.hash = c);
			},
			PathExpression(a, b, c, d, e) {
				(this.loc = e),
					(this.type = 'PathExpression'),
					(this.data = a),
					(this.original = d),
					(this.parts = c),
					(this.depth = b);
			},
			StringLiteral(a, b) {
				(this.loc = b), (this.type = 'StringLiteral'), (this.original = this.value = a);
			},
			NumberLiteral(a, b) {
				(this.loc = b), (this.type = 'NumberLiteral'), (this.original = this.value = Number(a));
			},
			BooleanLiteral(a, b) {
				(this.loc = b), (this.type = 'BooleanLiteral'), (this.original = this.value = a === 'true');
			},
			Hash(a, b) {
				(this.loc = b), (this.type = 'Hash'), (this.pairs = a);
			},
			HashPair(a, b, c) {
				(this.loc = c), (this.type = 'HashPair'), (this.key = a), (this.value = b);
			},
			helpers: {
				helperExpression(a) {
					return !(a.type !== 'SubExpression' && !a.params.length && !a.hash);
				},
				scopedId(a) {
					return /^\.|this\b/.test(a.original);
				},
				simpleId(a) {
					return a.parts.length === 1 && !b.helpers.scopedId(a) && !a.depth;
				},
			},
		};
		return (a = b);
	})();
	const h = (function () {
		let a;
		const b = (function () {
			function a() {
				this.yy = {};
			}
			const b = {
				trace() {},
				yy: {},
				symbols_: {
					error: 2,
					root: 3,
					program: 4,
					EOF: 5,
					program_repetition0: 6,
					statement: 7,
					mustache: 8,
					block: 9,
					rawBlock: 10,
					partial: 11,
					content: 12,
					COMMENT: 13,
					CONTENT: 14,
					openRawBlock: 15,
					END_RAW_BLOCK: 16,
					OPEN_RAW_BLOCK: 17,
					helperName: 18,
					openRawBlock_repetition0: 19,
					openRawBlock_option0: 20,
					CLOSE_RAW_BLOCK: 21,
					openBlock: 22,
					block_option0: 23,
					closeBlock: 24,
					openInverse: 25,
					block_option1: 26,
					OPEN_BLOCK: 27,
					openBlock_repetition0: 28,
					openBlock_option0: 29,
					openBlock_option1: 30,
					CLOSE: 31,
					OPEN_INVERSE: 32,
					openInverse_repetition0: 33,
					openInverse_option0: 34,
					openInverse_option1: 35,
					openInverseChain: 36,
					OPEN_INVERSE_CHAIN: 37,
					openInverseChain_repetition0: 38,
					openInverseChain_option0: 39,
					openInverseChain_option1: 40,
					inverseAndProgram: 41,
					INVERSE: 42,
					inverseChain: 43,
					inverseChain_option0: 44,
					OPEN_ENDBLOCK: 45,
					OPEN: 46,
					mustache_repetition0: 47,
					mustache_option0: 48,
					OPEN_UNESCAPED: 49,
					mustache_repetition1: 50,
					mustache_option1: 51,
					CLOSE_UNESCAPED: 52,
					OPEN_PARTIAL: 53,
					partialName: 54,
					partial_repetition0: 55,
					partial_option0: 56,
					param: 57,
					sexpr: 58,
					OPEN_SEXPR: 59,
					sexpr_repetition0: 60,
					sexpr_option0: 61,
					CLOSE_SEXPR: 62,
					hash: 63,
					hash_repetition_plus0: 64,
					hashSegment: 65,
					ID: 66,
					EQUALS: 67,
					blockParams: 68,
					OPEN_BLOCK_PARAMS: 69,
					blockParams_repetition_plus0: 70,
					CLOSE_BLOCK_PARAMS: 71,
					path: 72,
					dataName: 73,
					STRING: 74,
					NUMBER: 75,
					BOOLEAN: 76,
					DATA: 77,
					pathSegments: 78,
					SEP: 79,
					$accept: 0,
					$end: 1,
				},
				terminals_: {
					2: 'error',
					5: 'EOF',
					13: 'COMMENT',
					14: 'CONTENT',
					16: 'END_RAW_BLOCK',
					17: 'OPEN_RAW_BLOCK',
					21: 'CLOSE_RAW_BLOCK',
					27: 'OPEN_BLOCK',
					31: 'CLOSE',
					32: 'OPEN_INVERSE',
					37: 'OPEN_INVERSE_CHAIN',
					42: 'INVERSE',
					45: 'OPEN_ENDBLOCK',
					46: 'OPEN',
					49: 'OPEN_UNESCAPED',
					52: 'CLOSE_UNESCAPED',
					53: 'OPEN_PARTIAL',
					59: 'OPEN_SEXPR',
					62: 'CLOSE_SEXPR',
					66: 'ID',
					67: 'EQUALS',
					69: 'OPEN_BLOCK_PARAMS',
					71: 'CLOSE_BLOCK_PARAMS',
					74: 'STRING',
					75: 'NUMBER',
					76: 'BOOLEAN',
					77: 'DATA',
					79: 'SEP',
				},
				productions_: [
					0,
					[3, 2],
					[4, 1],
					[7, 1],
					[7, 1],
					[7, 1],
					[7, 1],
					[7, 1],
					[7, 1],
					[12, 1],
					[10, 3],
					[15, 5],
					[9, 4],
					[9, 4],
					[22, 6],
					[25, 6],
					[36, 6],
					[41, 2],
					[43, 3],
					[43, 1],
					[24, 3],
					[8, 5],
					[8, 5],
					[11, 5],
					[57, 1],
					[57, 1],
					[58, 5],
					[63, 1],
					[65, 3],
					[68, 3],
					[18, 1],
					[18, 1],
					[18, 1],
					[18, 1],
					[18, 1],
					[54, 1],
					[54, 1],
					[73, 2],
					[72, 1],
					[78, 3],
					[78, 1],
					[6, 0],
					[6, 2],
					[19, 0],
					[19, 2],
					[20, 0],
					[20, 1],
					[23, 0],
					[23, 1],
					[26, 0],
					[26, 1],
					[28, 0],
					[28, 2],
					[29, 0],
					[29, 1],
					[30, 0],
					[30, 1],
					[33, 0],
					[33, 2],
					[34, 0],
					[34, 1],
					[35, 0],
					[35, 1],
					[38, 0],
					[38, 2],
					[39, 0],
					[39, 1],
					[40, 0],
					[40, 1],
					[44, 0],
					[44, 1],
					[47, 0],
					[47, 2],
					[48, 0],
					[48, 1],
					[50, 0],
					[50, 2],
					[51, 0],
					[51, 1],
					[55, 0],
					[55, 2],
					[56, 0],
					[56, 1],
					[60, 0],
					[60, 2],
					[61, 0],
					[61, 1],
					[64, 1],
					[64, 2],
					[70, 1],
					[70, 2],
				],
				performAction(a, b, c, d, e, f) {
					const g = f.length - 1;
					switch (e) {
						case 1:
							return f[g - 1];
						case 2:
							this.$ = new d.Program(f[g], null, {}, d.locInfo(this._$));
							break;
						case 3:
							this.$ = f[g];
							break;
						case 4:
							this.$ = f[g];
							break;
						case 5:
							this.$ = f[g];
							break;
						case 6:
							this.$ = f[g];
							break;
						case 7:
							this.$ = f[g];
							break;
						case 8:
							this.$ = new d.CommentStatement(
								d.stripComment(f[g]),
								d.stripFlags(f[g], f[g]),
								d.locInfo(this._$)
							);
							break;
						case 9:
							this.$ = new d.ContentStatement(f[g], d.locInfo(this._$));
							break;
						case 10:
							this.$ = d.prepareRawBlock(f[g - 2], f[g - 1], f[g], this._$);
							break;
						case 11:
							this.$ = { path: f[g - 3], params: f[g - 2], hash: f[g - 1] };
							break;
						case 12:
							this.$ = d.prepareBlock(f[g - 3], f[g - 2], f[g - 1], f[g], !1, this._$);
							break;
						case 13:
							this.$ = d.prepareBlock(f[g - 3], f[g - 2], f[g - 1], f[g], !0, this._$);
							break;
						case 14:
							this.$ = {
								path: f[g - 4],
								params: f[g - 3],
								hash: f[g - 2],
								blockParams: f[g - 1],
								strip: d.stripFlags(f[g - 5], f[g]),
							};
							break;
						case 15:
							this.$ = {
								path: f[g - 4],
								params: f[g - 3],
								hash: f[g - 2],
								blockParams: f[g - 1],
								strip: d.stripFlags(f[g - 5], f[g]),
							};
							break;
						case 16:
							this.$ = {
								path: f[g - 4],
								params: f[g - 3],
								hash: f[g - 2],
								blockParams: f[g - 1],
								strip: d.stripFlags(f[g - 5], f[g]),
							};
							break;
						case 17:
							this.$ = { strip: d.stripFlags(f[g - 1], f[g - 1]), program: f[g] };
							break;
						case 18:
							var h = d.prepareBlock(f[g - 2], f[g - 1], f[g], f[g], !1, this._$);
							var i = new d.Program([h], null, {}, d.locInfo(this._$));
							(i.chained = !0), (this.$ = { strip: f[g - 2].strip, program: i, chain: !0 });
							break;
						case 19:
							this.$ = f[g];
							break;
						case 20:
							this.$ = { path: f[g - 1], strip: d.stripFlags(f[g - 2], f[g]) };
							break;
						case 21:
							this.$ = d.prepareMustache(
								f[g - 3],
								f[g - 2],
								f[g - 1],
								f[g - 4],
								d.stripFlags(f[g - 4], f[g]),
								this._$
							);
							break;
						case 22:
							this.$ = d.prepareMustache(
								f[g - 3],
								f[g - 2],
								f[g - 1],
								f[g - 4],
								d.stripFlags(f[g - 4], f[g]),
								this._$
							);
							break;
						case 23:
							this.$ = new d.PartialStatement(
								f[g - 3],
								f[g - 2],
								f[g - 1],
								d.stripFlags(f[g - 4], f[g]),
								d.locInfo(this._$)
							);
							break;
						case 24:
							this.$ = f[g];
							break;
						case 25:
							this.$ = f[g];
							break;
						case 26:
							this.$ = new d.SubExpression(f[g - 3], f[g - 2], f[g - 1], d.locInfo(this._$));
							break;
						case 27:
							this.$ = new d.Hash(f[g], d.locInfo(this._$));
							break;
						case 28:
							this.$ = new d.HashPair(f[g - 2], f[g], d.locInfo(this._$));
							break;
						case 29:
							this.$ = f[g - 1];
							break;
						case 30:
							this.$ = f[g];
							break;
						case 31:
							this.$ = f[g];
							break;
						case 32:
							this.$ = new d.StringLiteral(f[g], d.locInfo(this._$));
							break;
						case 33:
							this.$ = new d.NumberLiteral(f[g], d.locInfo(this._$));
							break;
						case 34:
							this.$ = new d.BooleanLiteral(f[g], d.locInfo(this._$));
							break;
						case 35:
							this.$ = f[g];
							break;
						case 36:
							this.$ = f[g];
							break;
						case 37:
							this.$ = d.preparePath(!0, f[g], this._$);
							break;
						case 38:
							this.$ = d.preparePath(!1, f[g], this._$);
							break;
						case 39:
							f[g - 2].push({ part: f[g], separator: f[g - 1] }), (this.$ = f[g - 2]);
							break;
						case 40:
							this.$ = [{ part: f[g] }];
							break;
						case 41:
							this.$ = [];
							break;
						case 42:
							f[g - 1].push(f[g]);
							break;
						case 43:
							this.$ = [];
							break;
						case 44:
							f[g - 1].push(f[g]);
							break;
						case 51:
							this.$ = [];
							break;
						case 52:
							f[g - 1].push(f[g]);
							break;
						case 57:
							this.$ = [];
							break;
						case 58:
							f[g - 1].push(f[g]);
							break;
						case 63:
							this.$ = [];
							break;
						case 64:
							f[g - 1].push(f[g]);
							break;
						case 71:
							this.$ = [];
							break;
						case 72:
							f[g - 1].push(f[g]);
							break;
						case 75:
							this.$ = [];
							break;
						case 76:
							f[g - 1].push(f[g]);
							break;
						case 79:
							this.$ = [];
							break;
						case 80:
							f[g - 1].push(f[g]);
							break;
						case 83:
							this.$ = [];
							break;
						case 84:
							f[g - 1].push(f[g]);
							break;
						case 87:
							this.$ = [f[g]];
							break;
						case 88:
							f[g - 1].push(f[g]);
							break;
						case 89:
							this.$ = [f[g]];
							break;
						case 90:
							f[g - 1].push(f[g]);
					}
				},
				table: [
					{
						3: 1,
						4: 2,
						5: [2, 41],
						6: 3,
						13: [2, 41],
						14: [2, 41],
						17: [2, 41],
						27: [2, 41],
						32: [2, 41],
						46: [2, 41],
						49: [2, 41],
						53: [2, 41],
					},
					{ 1: [3] },
					{ 5: [1, 4] },
					{
						5: [2, 2],
						7: 5,
						8: 6,
						9: 7,
						10: 8,
						11: 9,
						12: 10,
						13: [1, 11],
						14: [1, 18],
						15: 16,
						17: [1, 21],
						22: 14,
						25: 15,
						27: [1, 19],
						32: [1, 20],
						37: [2, 2],
						42: [2, 2],
						45: [2, 2],
						46: [1, 12],
						49: [1, 13],
						53: [1, 17],
					},
					{ 1: [2, 1] },
					{
						5: [2, 42],
						13: [2, 42],
						14: [2, 42],
						17: [2, 42],
						27: [2, 42],
						32: [2, 42],
						37: [2, 42],
						42: [2, 42],
						45: [2, 42],
						46: [2, 42],
						49: [2, 42],
						53: [2, 42],
					},
					{
						5: [2, 3],
						13: [2, 3],
						14: [2, 3],
						17: [2, 3],
						27: [2, 3],
						32: [2, 3],
						37: [2, 3],
						42: [2, 3],
						45: [2, 3],
						46: [2, 3],
						49: [2, 3],
						53: [2, 3],
					},
					{
						5: [2, 4],
						13: [2, 4],
						14: [2, 4],
						17: [2, 4],
						27: [2, 4],
						32: [2, 4],
						37: [2, 4],
						42: [2, 4],
						45: [2, 4],
						46: [2, 4],
						49: [2, 4],
						53: [2, 4],
					},
					{
						5: [2, 5],
						13: [2, 5],
						14: [2, 5],
						17: [2, 5],
						27: [2, 5],
						32: [2, 5],
						37: [2, 5],
						42: [2, 5],
						45: [2, 5],
						46: [2, 5],
						49: [2, 5],
						53: [2, 5],
					},
					{
						5: [2, 6],
						13: [2, 6],
						14: [2, 6],
						17: [2, 6],
						27: [2, 6],
						32: [2, 6],
						37: [2, 6],
						42: [2, 6],
						45: [2, 6],
						46: [2, 6],
						49: [2, 6],
						53: [2, 6],
					},
					{
						5: [2, 7],
						13: [2, 7],
						14: [2, 7],
						17: [2, 7],
						27: [2, 7],
						32: [2, 7],
						37: [2, 7],
						42: [2, 7],
						45: [2, 7],
						46: [2, 7],
						49: [2, 7],
						53: [2, 7],
					},
					{
						5: [2, 8],
						13: [2, 8],
						14: [2, 8],
						17: [2, 8],
						27: [2, 8],
						32: [2, 8],
						37: [2, 8],
						42: [2, 8],
						45: [2, 8],
						46: [2, 8],
						49: [2, 8],
						53: [2, 8],
					},
					{
						18: 22,
						66: [1, 30],
						72: 23,
						73: 24,
						74: [1, 25],
						75: [1, 26],
						76: [1, 27],
						77: [1, 29],
						78: 28,
					},
					{
						18: 31,
						66: [1, 30],
						72: 23,
						73: 24,
						74: [1, 25],
						75: [1, 26],
						76: [1, 27],
						77: [1, 29],
						78: 28,
					},
					{
						4: 32,
						6: 3,
						13: [2, 41],
						14: [2, 41],
						17: [2, 41],
						27: [2, 41],
						32: [2, 41],
						37: [2, 41],
						42: [2, 41],
						45: [2, 41],
						46: [2, 41],
						49: [2, 41],
						53: [2, 41],
					},
					{
						4: 33,
						6: 3,
						13: [2, 41],
						14: [2, 41],
						17: [2, 41],
						27: [2, 41],
						32: [2, 41],
						42: [2, 41],
						45: [2, 41],
						46: [2, 41],
						49: [2, 41],
						53: [2, 41],
					},
					{ 12: 34, 14: [1, 18] },
					{
						18: 36,
						54: 35,
						58: 37,
						59: [1, 38],
						66: [1, 30],
						72: 23,
						73: 24,
						74: [1, 25],
						75: [1, 26],
						76: [1, 27],
						77: [1, 29],
						78: 28,
					},
					{
						5: [2, 9],
						13: [2, 9],
						14: [2, 9],
						16: [2, 9],
						17: [2, 9],
						27: [2, 9],
						32: [2, 9],
						37: [2, 9],
						42: [2, 9],
						45: [2, 9],
						46: [2, 9],
						49: [2, 9],
						53: [2, 9],
					},
					{
						18: 39,
						66: [1, 30],
						72: 23,
						73: 24,
						74: [1, 25],
						75: [1, 26],
						76: [1, 27],
						77: [1, 29],
						78: 28,
					},
					{
						18: 40,
						66: [1, 30],
						72: 23,
						73: 24,
						74: [1, 25],
						75: [1, 26],
						76: [1, 27],
						77: [1, 29],
						78: 28,
					},
					{
						18: 41,
						66: [1, 30],
						72: 23,
						73: 24,
						74: [1, 25],
						75: [1, 26],
						76: [1, 27],
						77: [1, 29],
						78: 28,
					},
					{
						31: [2, 71],
						47: 42,
						59: [2, 71],
						66: [2, 71],
						74: [2, 71],
						75: [2, 71],
						76: [2, 71],
						77: [2, 71],
					},
					{
						21: [2, 30],
						31: [2, 30],
						52: [2, 30],
						59: [2, 30],
						62: [2, 30],
						66: [2, 30],
						69: [2, 30],
						74: [2, 30],
						75: [2, 30],
						76: [2, 30],
						77: [2, 30],
					},
					{
						21: [2, 31],
						31: [2, 31],
						52: [2, 31],
						59: [2, 31],
						62: [2, 31],
						66: [2, 31],
						69: [2, 31],
						74: [2, 31],
						75: [2, 31],
						76: [2, 31],
						77: [2, 31],
					},
					{
						21: [2, 32],
						31: [2, 32],
						52: [2, 32],
						59: [2, 32],
						62: [2, 32],
						66: [2, 32],
						69: [2, 32],
						74: [2, 32],
						75: [2, 32],
						76: [2, 32],
						77: [2, 32],
					},
					{
						21: [2, 33],
						31: [2, 33],
						52: [2, 33],
						59: [2, 33],
						62: [2, 33],
						66: [2, 33],
						69: [2, 33],
						74: [2, 33],
						75: [2, 33],
						76: [2, 33],
						77: [2, 33],
					},
					{
						21: [2, 34],
						31: [2, 34],
						52: [2, 34],
						59: [2, 34],
						62: [2, 34],
						66: [2, 34],
						69: [2, 34],
						74: [2, 34],
						75: [2, 34],
						76: [2, 34],
						77: [2, 34],
					},
					{
						21: [2, 38],
						31: [2, 38],
						52: [2, 38],
						59: [2, 38],
						62: [2, 38],
						66: [2, 38],
						69: [2, 38],
						74: [2, 38],
						75: [2, 38],
						76: [2, 38],
						77: [2, 38],
						79: [1, 43],
					},
					{ 66: [1, 30], 78: 44 },
					{
						21: [2, 40],
						31: [2, 40],
						52: [2, 40],
						59: [2, 40],
						62: [2, 40],
						66: [2, 40],
						69: [2, 40],
						74: [2, 40],
						75: [2, 40],
						76: [2, 40],
						77: [2, 40],
						79: [2, 40],
					},
					{
						50: 45,
						52: [2, 75],
						59: [2, 75],
						66: [2, 75],
						74: [2, 75],
						75: [2, 75],
						76: [2, 75],
						77: [2, 75],
					},
					{ 23: 46, 36: 48, 37: [1, 50], 41: 49, 42: [1, 51], 43: 47, 45: [2, 47] },
					{ 26: 52, 41: 53, 42: [1, 51], 45: [2, 49] },
					{ 16: [1, 54] },
					{
						31: [2, 79],
						55: 55,
						59: [2, 79],
						66: [2, 79],
						74: [2, 79],
						75: [2, 79],
						76: [2, 79],
						77: [2, 79],
					},
					{
						31: [2, 35],
						59: [2, 35],
						66: [2, 35],
						74: [2, 35],
						75: [2, 35],
						76: [2, 35],
						77: [2, 35],
					},
					{
						31: [2, 36],
						59: [2, 36],
						66: [2, 36],
						74: [2, 36],
						75: [2, 36],
						76: [2, 36],
						77: [2, 36],
					},
					{
						18: 56,
						66: [1, 30],
						72: 23,
						73: 24,
						74: [1, 25],
						75: [1, 26],
						76: [1, 27],
						77: [1, 29],
						78: 28,
					},
					{
						28: 57,
						31: [2, 51],
						59: [2, 51],
						66: [2, 51],
						69: [2, 51],
						74: [2, 51],
						75: [2, 51],
						76: [2, 51],
						77: [2, 51],
					},
					{
						31: [2, 57],
						33: 58,
						59: [2, 57],
						66: [2, 57],
						69: [2, 57],
						74: [2, 57],
						75: [2, 57],
						76: [2, 57],
						77: [2, 57],
					},
					{
						19: 59,
						21: [2, 43],
						59: [2, 43],
						66: [2, 43],
						74: [2, 43],
						75: [2, 43],
						76: [2, 43],
						77: [2, 43],
					},
					{
						18: 63,
						31: [2, 73],
						48: 60,
						57: 61,
						58: 64,
						59: [1, 38],
						63: 62,
						64: 65,
						65: 66,
						66: [1, 67],
						72: 23,
						73: 24,
						74: [1, 25],
						75: [1, 26],
						76: [1, 27],
						77: [1, 29],
						78: 28,
					},
					{ 66: [1, 68] },
					{
						21: [2, 37],
						31: [2, 37],
						52: [2, 37],
						59: [2, 37],
						62: [2, 37],
						66: [2, 37],
						69: [2, 37],
						74: [2, 37],
						75: [2, 37],
						76: [2, 37],
						77: [2, 37],
						79: [1, 43],
					},
					{
						18: 63,
						51: 69,
						52: [2, 77],
						57: 70,
						58: 64,
						59: [1, 38],
						63: 71,
						64: 65,
						65: 66,
						66: [1, 67],
						72: 23,
						73: 24,
						74: [1, 25],
						75: [1, 26],
						76: [1, 27],
						77: [1, 29],
						78: 28,
					},
					{ 24: 72, 45: [1, 73] },
					{ 45: [2, 48] },
					{
						4: 74,
						6: 3,
						13: [2, 41],
						14: [2, 41],
						17: [2, 41],
						27: [2, 41],
						32: [2, 41],
						37: [2, 41],
						42: [2, 41],
						45: [2, 41],
						46: [2, 41],
						49: [2, 41],
						53: [2, 41],
					},
					{ 45: [2, 19] },
					{
						18: 75,
						66: [1, 30],
						72: 23,
						73: 24,
						74: [1, 25],
						75: [1, 26],
						76: [1, 27],
						77: [1, 29],
						78: 28,
					},
					{
						4: 76,
						6: 3,
						13: [2, 41],
						14: [2, 41],
						17: [2, 41],
						27: [2, 41],
						32: [2, 41],
						45: [2, 41],
						46: [2, 41],
						49: [2, 41],
						53: [2, 41],
					},
					{ 24: 77, 45: [1, 73] },
					{ 45: [2, 50] },
					{
						5: [2, 10],
						13: [2, 10],
						14: [2, 10],
						17: [2, 10],
						27: [2, 10],
						32: [2, 10],
						37: [2, 10],
						42: [2, 10],
						45: [2, 10],
						46: [2, 10],
						49: [2, 10],
						53: [2, 10],
					},
					{
						18: 63,
						31: [2, 81],
						56: 78,
						57: 79,
						58: 64,
						59: [1, 38],
						63: 80,
						64: 65,
						65: 66,
						66: [1, 67],
						72: 23,
						73: 24,
						74: [1, 25],
						75: [1, 26],
						76: [1, 27],
						77: [1, 29],
						78: 28,
					},
					{
						59: [2, 83],
						60: 81,
						62: [2, 83],
						66: [2, 83],
						74: [2, 83],
						75: [2, 83],
						76: [2, 83],
						77: [2, 83],
					},
					{
						18: 63,
						29: 82,
						31: [2, 53],
						57: 83,
						58: 64,
						59: [1, 38],
						63: 84,
						64: 65,
						65: 66,
						66: [1, 67],
						69: [2, 53],
						72: 23,
						73: 24,
						74: [1, 25],
						75: [1, 26],
						76: [1, 27],
						77: [1, 29],
						78: 28,
					},
					{
						18: 63,
						31: [2, 59],
						34: 85,
						57: 86,
						58: 64,
						59: [1, 38],
						63: 87,
						64: 65,
						65: 66,
						66: [1, 67],
						69: [2, 59],
						72: 23,
						73: 24,
						74: [1, 25],
						75: [1, 26],
						76: [1, 27],
						77: [1, 29],
						78: 28,
					},
					{
						18: 63,
						20: 88,
						21: [2, 45],
						57: 89,
						58: 64,
						59: [1, 38],
						63: 90,
						64: 65,
						65: 66,
						66: [1, 67],
						72: 23,
						73: 24,
						74: [1, 25],
						75: [1, 26],
						76: [1, 27],
						77: [1, 29],
						78: 28,
					},
					{ 31: [1, 91] },
					{
						31: [2, 72],
						59: [2, 72],
						66: [2, 72],
						74: [2, 72],
						75: [2, 72],
						76: [2, 72],
						77: [2, 72],
					},
					{ 31: [2, 74] },
					{
						21: [2, 24],
						31: [2, 24],
						52: [2, 24],
						59: [2, 24],
						62: [2, 24],
						66: [2, 24],
						69: [2, 24],
						74: [2, 24],
						75: [2, 24],
						76: [2, 24],
						77: [2, 24],
					},
					{
						21: [2, 25],
						31: [2, 25],
						52: [2, 25],
						59: [2, 25],
						62: [2, 25],
						66: [2, 25],
						69: [2, 25],
						74: [2, 25],
						75: [2, 25],
						76: [2, 25],
						77: [2, 25],
					},
					{
						21: [2, 27],
						31: [2, 27],
						52: [2, 27],
						62: [2, 27],
						65: 92,
						66: [1, 93],
						69: [2, 27],
					},
					{ 21: [2, 87], 31: [2, 87], 52: [2, 87], 62: [2, 87], 66: [2, 87], 69: [2, 87] },
					{
						21: [2, 40],
						31: [2, 40],
						52: [2, 40],
						59: [2, 40],
						62: [2, 40],
						66: [2, 40],
						67: [1, 94],
						69: [2, 40],
						74: [2, 40],
						75: [2, 40],
						76: [2, 40],
						77: [2, 40],
						79: [2, 40],
					},
					{
						21: [2, 39],
						31: [2, 39],
						52: [2, 39],
						59: [2, 39],
						62: [2, 39],
						66: [2, 39],
						69: [2, 39],
						74: [2, 39],
						75: [2, 39],
						76: [2, 39],
						77: [2, 39],
						79: [2, 39],
					},
					{ 52: [1, 95] },
					{
						52: [2, 76],
						59: [2, 76],
						66: [2, 76],
						74: [2, 76],
						75: [2, 76],
						76: [2, 76],
						77: [2, 76],
					},
					{ 52: [2, 78] },
					{
						5: [2, 12],
						13: [2, 12],
						14: [2, 12],
						17: [2, 12],
						27: [2, 12],
						32: [2, 12],
						37: [2, 12],
						42: [2, 12],
						45: [2, 12],
						46: [2, 12],
						49: [2, 12],
						53: [2, 12],
					},
					{
						18: 96,
						66: [1, 30],
						72: 23,
						73: 24,
						74: [1, 25],
						75: [1, 26],
						76: [1, 27],
						77: [1, 29],
						78: 28,
					},
					{ 36: 48, 37: [1, 50], 41: 49, 42: [1, 51], 43: 98, 44: 97, 45: [2, 69] },
					{
						31: [2, 63],
						38: 99,
						59: [2, 63],
						66: [2, 63],
						69: [2, 63],
						74: [2, 63],
						75: [2, 63],
						76: [2, 63],
						77: [2, 63],
					},
					{ 45: [2, 17] },
					{
						5: [2, 13],
						13: [2, 13],
						14: [2, 13],
						17: [2, 13],
						27: [2, 13],
						32: [2, 13],
						37: [2, 13],
						42: [2, 13],
						45: [2, 13],
						46: [2, 13],
						49: [2, 13],
						53: [2, 13],
					},
					{ 31: [1, 100] },
					{
						31: [2, 80],
						59: [2, 80],
						66: [2, 80],
						74: [2, 80],
						75: [2, 80],
						76: [2, 80],
						77: [2, 80],
					},
					{ 31: [2, 82] },
					{
						18: 63,
						57: 102,
						58: 64,
						59: [1, 38],
						61: 101,
						62: [2, 85],
						63: 103,
						64: 65,
						65: 66,
						66: [1, 67],
						72: 23,
						73: 24,
						74: [1, 25],
						75: [1, 26],
						76: [1, 27],
						77: [1, 29],
						78: 28,
					},
					{ 30: 104, 31: [2, 55], 68: 105, 69: [1, 106] },
					{
						31: [2, 52],
						59: [2, 52],
						66: [2, 52],
						69: [2, 52],
						74: [2, 52],
						75: [2, 52],
						76: [2, 52],
						77: [2, 52],
					},
					{ 31: [2, 54], 69: [2, 54] },
					{ 31: [2, 61], 35: 107, 68: 108, 69: [1, 106] },
					{
						31: [2, 58],
						59: [2, 58],
						66: [2, 58],
						69: [2, 58],
						74: [2, 58],
						75: [2, 58],
						76: [2, 58],
						77: [2, 58],
					},
					{ 31: [2, 60], 69: [2, 60] },
					{ 21: [1, 109] },
					{
						21: [2, 44],
						59: [2, 44],
						66: [2, 44],
						74: [2, 44],
						75: [2, 44],
						76: [2, 44],
						77: [2, 44],
					},
					{ 21: [2, 46] },
					{
						5: [2, 21],
						13: [2, 21],
						14: [2, 21],
						17: [2, 21],
						27: [2, 21],
						32: [2, 21],
						37: [2, 21],
						42: [2, 21],
						45: [2, 21],
						46: [2, 21],
						49: [2, 21],
						53: [2, 21],
					},
					{ 21: [2, 88], 31: [2, 88], 52: [2, 88], 62: [2, 88], 66: [2, 88], 69: [2, 88] },
					{ 67: [1, 94] },
					{
						18: 63,
						57: 110,
						58: 64,
						59: [1, 38],
						66: [1, 30],
						72: 23,
						73: 24,
						74: [1, 25],
						75: [1, 26],
						76: [1, 27],
						77: [1, 29],
						78: 28,
					},
					{
						5: [2, 22],
						13: [2, 22],
						14: [2, 22],
						17: [2, 22],
						27: [2, 22],
						32: [2, 22],
						37: [2, 22],
						42: [2, 22],
						45: [2, 22],
						46: [2, 22],
						49: [2, 22],
						53: [2, 22],
					},
					{ 31: [1, 111] },
					{ 45: [2, 18] },
					{ 45: [2, 70] },
					{
						18: 63,
						31: [2, 65],
						39: 112,
						57: 113,
						58: 64,
						59: [1, 38],
						63: 114,
						64: 65,
						65: 66,
						66: [1, 67],
						69: [2, 65],
						72: 23,
						73: 24,
						74: [1, 25],
						75: [1, 26],
						76: [1, 27],
						77: [1, 29],
						78: 28,
					},
					{
						5: [2, 23],
						13: [2, 23],
						14: [2, 23],
						17: [2, 23],
						27: [2, 23],
						32: [2, 23],
						37: [2, 23],
						42: [2, 23],
						45: [2, 23],
						46: [2, 23],
						49: [2, 23],
						53: [2, 23],
					},
					{ 62: [1, 115] },
					{
						59: [2, 84],
						62: [2, 84],
						66: [2, 84],
						74: [2, 84],
						75: [2, 84],
						76: [2, 84],
						77: [2, 84],
					},
					{ 62: [2, 86] },
					{ 31: [1, 116] },
					{ 31: [2, 56] },
					{ 66: [1, 118], 70: 117 },
					{ 31: [1, 119] },
					{ 31: [2, 62] },
					{ 14: [2, 11] },
					{ 21: [2, 28], 31: [2, 28], 52: [2, 28], 62: [2, 28], 66: [2, 28], 69: [2, 28] },
					{
						5: [2, 20],
						13: [2, 20],
						14: [2, 20],
						17: [2, 20],
						27: [2, 20],
						32: [2, 20],
						37: [2, 20],
						42: [2, 20],
						45: [2, 20],
						46: [2, 20],
						49: [2, 20],
						53: [2, 20],
					},
					{ 31: [2, 67], 40: 120, 68: 121, 69: [1, 106] },
					{
						31: [2, 64],
						59: [2, 64],
						66: [2, 64],
						69: [2, 64],
						74: [2, 64],
						75: [2, 64],
						76: [2, 64],
						77: [2, 64],
					},
					{ 31: [2, 66], 69: [2, 66] },
					{
						21: [2, 26],
						31: [2, 26],
						52: [2, 26],
						59: [2, 26],
						62: [2, 26],
						66: [2, 26],
						69: [2, 26],
						74: [2, 26],
						75: [2, 26],
						76: [2, 26],
						77: [2, 26],
					},
					{
						13: [2, 14],
						14: [2, 14],
						17: [2, 14],
						27: [2, 14],
						32: [2, 14],
						37: [2, 14],
						42: [2, 14],
						45: [2, 14],
						46: [2, 14],
						49: [2, 14],
						53: [2, 14],
					},
					{ 66: [1, 123], 71: [1, 122] },
					{ 66: [2, 89], 71: [2, 89] },
					{
						13: [2, 15],
						14: [2, 15],
						17: [2, 15],
						27: [2, 15],
						32: [2, 15],
						42: [2, 15],
						45: [2, 15],
						46: [2, 15],
						49: [2, 15],
						53: [2, 15],
					},
					{ 31: [1, 124] },
					{ 31: [2, 68] },
					{ 31: [2, 29] },
					{ 66: [2, 90], 71: [2, 90] },
					{
						13: [2, 16],
						14: [2, 16],
						17: [2, 16],
						27: [2, 16],
						32: [2, 16],
						37: [2, 16],
						42: [2, 16],
						45: [2, 16],
						46: [2, 16],
						49: [2, 16],
						53: [2, 16],
					},
				],
				defaultActions: {
					4: [2, 1],
					47: [2, 48],
					49: [2, 19],
					53: [2, 50],
					62: [2, 74],
					71: [2, 78],
					76: [2, 17],
					80: [2, 82],
					90: [2, 46],
					97: [2, 18],
					98: [2, 70],
					103: [2, 86],
					105: [2, 56],
					108: [2, 62],
					109: [2, 11],
					121: [2, 68],
					122: [2, 29],
				},
				parseError(a) {
					throw new Error(a);
				},
				parse(a) {
					function b() {
						let a;
						return (a = c.lexer.lex() || 1), typeof a !== 'number' && (a = c.symbols_[a] || a), a;
					}
					var c = this;
					let d = [0];
					let e = [null];
					let f = [];
					const g = this.table;
					let h = '';
					let i = 0;
					let j = 0;
					let k = 0;
					this.lexer.setInput(a),
						(this.lexer.yy = this.yy),
						(this.yy.lexer = this.lexer),
						(this.yy.parser = this),
						typeof this.lexer.yylloc === 'undefined' && (this.lexer.yylloc = {});
					let l = this.lexer.yylloc;
					f.push(l);
					const m = this.lexer.options && this.lexer.options.ranges;
					typeof this.yy.parseError === 'function' && (this.parseError = this.yy.parseError);
					for (var n, o, p, q, r, s, t, u, v, w = {}; ; ) {
						if (
							((p = d[d.length - 1]),
							this.defaultActions[p]
								? (q = this.defaultActions[p])
								: ((n === null || typeof n === 'undefined') && (n = b()), (q = g[p] && g[p][n])),
							typeof q === 'undefined' || !q.length || !q[0])
						) {
							let x = '';
							if (!k) {
								v = [];
								for (s in g[p]) this.terminals_[s] && s > 2 && v.push(`'${this.terminals_[s]}'`);
								(x = this.lexer.showPosition
									? `Parse error on line ${
											i + 1
									  }:\n${this.lexer.showPosition()}\nExpecting ${v.join(', ')}, got '${
											this.terminals_[n] || n
									  }'`
									: `Parse error on line ${i + 1}: Unexpected ${
											n == 1 ? 'end of input' : `'${this.terminals_[n] || n}'`
									  }`),
									this.parseError(x, {
										text: this.lexer.match,
										token: this.terminals_[n] || n,
										line: this.lexer.yylineno,
										loc: l,
										expected: v,
									});
							}
						}
						if (q[0] instanceof Array && q.length > 1)
							throw new Error(`Parse Error: multiple actions possible at state: ${p}, token: ${n}`);
						switch (q[0]) {
							case 1:
								d.push(n),
									e.push(this.lexer.yytext),
									f.push(this.lexer.yylloc),
									d.push(q[1]),
									(n = null),
									o
										? ((n = o), (o = null))
										: ((j = this.lexer.yyleng),
										  (h = this.lexer.yytext),
										  (i = this.lexer.yylineno),
										  (l = this.lexer.yylloc),
										  k > 0 && k--);
								break;
							case 2:
								if (
									((t = this.productions_[q[1]][1]),
									(w.$ = e[e.length - t]),
									(w._$ = {
										first_line: f[f.length - (t || 1)].first_line,
										last_line: f[f.length - 1].last_line,
										first_column: f[f.length - (t || 1)].first_column,
										last_column: f[f.length - 1].last_column,
									}),
									m && (w._$.range = [f[f.length - (t || 1)].range[0], f[f.length - 1].range[1]]),
									(r = this.performAction.call(w, h, j, i, this.yy, q[1], e, f)),
									typeof r !== 'undefined')
								)
									return r;
								t &&
									((d = d.slice(0, -1 * t * 2)),
									(e = e.slice(0, -1 * t)),
									(f = f.slice(0, -1 * t))),
									d.push(this.productions_[q[1]][0]),
									e.push(w.$),
									f.push(w._$),
									(u = g[d[d.length - 2]][d[d.length - 1]]),
									d.push(u);
								break;
							case 3:
								return !0;
						}
					}
					return !0;
				},
			};
			const c = (function () {
				const a = {
					EOF: 1,
					parseError(a, b) {
						if (!this.yy.parser) throw new Error(a);
						this.yy.parser.parseError(a, b);
					},
					setInput(a) {
						return (
							(this._input = a),
							(this._more = this._less = this.done = !1),
							(this.yylineno = this.yyleng = 0),
							(this.yytext = this.matched = this.match = ''),
							(this.conditionStack = ['INITIAL']),
							(this.yylloc = {
								first_line: 1,
								first_column: 0,
								last_line: 1,
								last_column: 0,
							}),
							this.options.ranges && (this.yylloc.range = [0, 0]),
							(this.offset = 0),
							this
						);
					},
					input() {
						const a = this._input[0];
						(this.yytext += a),
							this.yyleng++,
							this.offset++,
							(this.match += a),
							(this.matched += a);
						const b = a.match(/(?:\r\n?|\n).*/g);
						return (
							b ? (this.yylineno++, this.yylloc.last_line++) : this.yylloc.last_column++,
							this.options.ranges && this.yylloc.range[1]++,
							(this._input = this._input.slice(1)),
							a
						);
					},
					unput(a) {
						const b = a.length;
						const c = a.split(/(?:\r\n?|\n)/g);
						(this._input = a + this._input),
							(this.yytext = this.yytext.substr(0, this.yytext.length - b - 1)),
							(this.offset -= b);
						const d = this.match.split(/(?:\r\n?|\n)/g);
						(this.match = this.match.substr(0, this.match.length - 1)),
							(this.matched = this.matched.substr(0, this.matched.length - 1)),
							c.length - 1 && (this.yylineno -= c.length - 1);
						const e = this.yylloc.range;
						return (
							(this.yylloc = {
								first_line: this.yylloc.first_line,
								last_line: this.yylineno + 1,
								first_column: this.yylloc.first_column,
								last_column: c
									? (c.length === d.length ? this.yylloc.first_column : 0) +
									  d[d.length - c.length].length -
									  c[0].length
									: this.yylloc.first_column - b,
							}),
							this.options.ranges && (this.yylloc.range = [e[0], e[0] + this.yyleng - b]),
							this
						);
					},
					more() {
						return (this._more = !0), this;
					},
					less(a) {
						this.unput(this.match.slice(a));
					},
					pastInput() {
						const a = this.matched.substr(0, this.matched.length - this.match.length);
						return (a.length > 20 ? '...' : '') + a.substr(-20).replace(/\n/g, '');
					},
					upcomingInput() {
						let a = this.match;
						return (
							a.length < 20 && (a += this._input.substr(0, 20 - a.length)),
							(a.substr(0, 20) + (a.length > 20 ? '...' : '')).replace(/\n/g, '')
						);
					},
					showPosition() {
						const a = this.pastInput();
						const b = new Array(a.length + 1).join('-');
						return `${a + this.upcomingInput()}\n${b}^`;
					},
					next() {
						if (this.done) return this.EOF;
						this._input || (this.done = !0);
						let a;
						let b;
						let c;
						let d;
						let e;
						this._more || ((this.yytext = ''), (this.match = ''));
						for (
							var f = this._currentRules(), g = 0;
							g < f.length &&
							((c = this._input.match(this.rules[f[g]])),
							!c || (b && !(c[0].length > b[0].length)) || ((b = c), (d = g), this.options.flex));
							g++
						);
						return b
							? ((e = b[0].match(/(?:\r\n?|\n).*/g)),
							  e && (this.yylineno += e.length),
							  (this.yylloc = {
									first_line: this.yylloc.last_line,
									last_line: this.yylineno + 1,
									first_column: this.yylloc.last_column,
									last_column: e
										? e[e.length - 1].length - e[e.length - 1].match(/\r?\n?/)[0].length
										: this.yylloc.last_column + b[0].length,
							  }),
							  (this.yytext += b[0]),
							  (this.match += b[0]),
							  (this.matches = b),
							  (this.yyleng = this.yytext.length),
							  this.options.ranges &&
									(this.yylloc.range = [this.offset, (this.offset += this.yyleng)]),
							  (this._more = !1),
							  (this._input = this._input.slice(b[0].length)),
							  (this.matched += b[0]),
							  (a = this.performAction.call(
									this,
									this.yy,
									this,
									f[d],
									this.conditionStack[this.conditionStack.length - 1]
							  )),
							  this.done && this._input && (this.done = !1),
							  a || void 0)
							: this._input === ''
							? this.EOF
							: this.parseError(
									`Lexical error on line ${
										this.yylineno + 1
									}. Unrecognized text.\n${this.showPosition()}`,
									{ text: '', token: null, line: this.yylineno }
							  );
					},
					lex() {
						const a = this.next();
						return typeof a !== 'undefined' ? a : this.lex();
					},
					begin(a) {
						this.conditionStack.push(a);
					},
					popState() {
						return this.conditionStack.pop();
					},
					_currentRules() {
						return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
					},
					topState() {
						return this.conditionStack[this.conditionStack.length - 2];
					},
					pushState(a) {
						this.begin(a);
					},
				};
				return (
					(a.options = {}),
					(a.performAction = function (a, b, c, d) {
						function e(a, c) {
							return (b.yytext = b.yytext.substr(a, b.yyleng - c));
						}
						switch (c) {
							case 0:
								if (
									(b.yytext.slice(-2) === '\\\\'
										? (e(0, 1), this.begin('mu'))
										: b.yytext.slice(-1) === '\\'
										? (e(0, 1), this.begin('emu'))
										: this.begin('mu'),
									b.yytext)
								)
									return 14;
								break;
							case 1:
								return 14;
							case 2:
								return this.popState(), 14;
							case 3:
								return (b.yytext = b.yytext.substr(5, b.yyleng - 9)), this.popState(), 16;
							case 4:
								return 14;
							case 5:
								return this.popState(), 13;
							case 6:
								return 59;
							case 7:
								return 62;
							case 8:
								return 17;
							case 9:
								return this.popState(), this.begin('raw'), 21;
							case 10:
								return 53;
							case 11:
								return 27;
							case 12:
								return 45;
							case 13:
								return this.popState(), 42;
							case 14:
								return this.popState(), 42;
							case 15:
								return 32;
							case 16:
								return 37;
							case 17:
								return 49;
							case 18:
								return 46;
							case 19:
								this.unput(b.yytext), this.popState(), this.begin('com');
								break;
							case 20:
								return this.popState(), 13;
							case 21:
								return 46;
							case 22:
								return 67;
							case 23:
								return 66;
							case 24:
								return 66;
							case 25:
								return 79;
							case 26:
								break;
							case 27:
								return this.popState(), 52;
							case 28:
								return this.popState(), 31;
							case 29:
								return (b.yytext = e(1, 2).replace(/\\"/g, '"')), 74;
							case 30:
								return (b.yytext = e(1, 2).replace(/\\'/g, "'")), 74;
							case 31:
								return 77;
							case 32:
								return 76;
							case 33:
								return 76;
							case 34:
								return 75;
							case 35:
								return 69;
							case 36:
								return 71;
							case 37:
								return 66;
							case 38:
								return (b.yytext = e(1, 2)), 66;
							case 39:
								return 'INVALID';
							case 40:
								return 5;
						}
					}),
					(a.rules = [
						/^(?:[^\x00]*?(?=(\{\{)))/,
						/^(?:[^\x00]+)/,
						/^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/,
						/^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/,
						/^(?:[^\x00]*?(?=(\{\{\{\{\/)))/,
						/^(?:[\s\S]*?--(~)?\}\})/,
						/^(?:\()/,
						/^(?:\))/,
						/^(?:\{\{\{\{)/,
						/^(?:\}\}\}\})/,
						/^(?:\{\{(~)?>)/,
						/^(?:\{\{(~)?#)/,
						/^(?:\{\{(~)?\/)/,
						/^(?:\{\{(~)?\^\s*(~)?\}\})/,
						/^(?:\{\{(~)?\s*else\s*(~)?\}\})/,
						/^(?:\{\{(~)?\^)/,
						/^(?:\{\{(~)?\s*else\b)/,
						/^(?:\{\{(~)?\{)/,
						/^(?:\{\{(~)?&)/,
						/^(?:\{\{(~)?!--)/,
						/^(?:\{\{(~)?![\s\S]*?\}\})/,
						/^(?:\{\{(~)?)/,
						/^(?:=)/,
						/^(?:\.\.)/,
						/^(?:\.(?=([=~}\s\/.)|])))/,
						/^(?:[\/.])/,
						/^(?:\s+)/,
						/^(?:\}(~)?\}\})/,
						/^(?:(~)?\}\})/,
						/^(?:"(\\["]|[^"])*")/,
						/^(?:'(\\[']|[^'])*')/,
						/^(?:@)/,
						/^(?:true(?=([~}\s)])))/,
						/^(?:false(?=([~}\s)])))/,
						/^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/,
						/^(?:as\s+\|)/,
						/^(?:\|)/,
						/^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/,
						/^(?:\[[^\]]*\])/,
						/^(?:.)/,
						/^(?:$)/,
					]),
					(a.conditions = {
						mu: {
							rules: [
								6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
								28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
							],
							inclusive: !1,
						},
						emu: { rules: [2], inclusive: !1 },
						com: { rules: [5], inclusive: !1 },
						raw: { rules: [3, 4], inclusive: !1 },
						INITIAL: { rules: [0, 1, 40], inclusive: !0 },
					}),
					a
				);
			})();
			return (b.lexer = c), (a.prototype = b), (b.Parser = a), new a();
		})();
		return (a = b);
	})();
	const i = (function (a, b) {
		function c() {
			this.parents = [];
		}
		let d;
		const e = a;
		const f = b;
		return (
			(c.prototype = {
				constructor: c,
				mutating: !1,
				acceptKey(a, b) {
					const c = this.accept(a[b]);
					if (this.mutating) {
						if (c && (!c.type || !f[c.type]))
							throw new e(
								`Unexpected node type "${c.type}" found when accepting ${b} on ${a.type}`
							);
						a[b] = c;
					}
				},
				acceptRequired(a, b) {
					if ((this.acceptKey(a, b), !a[b])) throw new e(`${a.type} requires ${b}`);
				},
				acceptArray(a) {
					for (let b = 0, c = a.length; c > b; b++)
						this.acceptKey(a, b), a[b] || (a.splice(b, 1), b--, c--);
				},
				accept(a) {
					if (a) {
						this.current && this.parents.unshift(this.current), (this.current = a);
						const b = this[a.type](a);
						return (
							(this.current = this.parents.shift()), !this.mutating || b ? b : b !== !1 ? a : void 0
						);
					}
				},
				Program(a) {
					this.acceptArray(a.body);
				},
				MustacheStatement(a) {
					this.acceptRequired(a, 'path'), this.acceptArray(a.params), this.acceptKey(a, 'hash');
				},
				BlockStatement(a) {
					this.acceptRequired(a, 'path'),
						this.acceptArray(a.params),
						this.acceptKey(a, 'hash'),
						this.acceptKey(a, 'program'),
						this.acceptKey(a, 'inverse');
				},
				PartialStatement(a) {
					this.acceptRequired(a, 'name'), this.acceptArray(a.params), this.acceptKey(a, 'hash');
				},
				ContentStatement() {},
				CommentStatement() {},
				SubExpression(a) {
					this.acceptRequired(a, 'path'), this.acceptArray(a.params), this.acceptKey(a, 'hash');
				},
				PartialExpression(a) {
					this.acceptRequired(a, 'name'), this.acceptArray(a.params), this.acceptKey(a, 'hash');
				},
				PathExpression() {},
				StringLiteral() {},
				NumberLiteral() {},
				BooleanLiteral() {},
				Hash(a) {
					this.acceptArray(a.pairs);
				},
				HashPair(a) {
					this.acceptRequired(a, 'value');
				},
			}),
			(d = c)
		);
	})(b, g);
	const j = (function (a) {
		function b() {}
		function c(a, b, c) {
			void 0 === b && (b = a.length);
			const d = a[b - 1];
			const e = a[b - 2];
			return d
				? d.type === 'ContentStatement'
					? (e || !c ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(d.original)
					: void 0
				: c;
		}
		function d(a, b, c) {
			void 0 === b && (b = -1);
			const d = a[b + 1];
			const e = a[b + 2];
			return d
				? d.type === 'ContentStatement'
					? (e || !c ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(d.original)
					: void 0
				: c;
		}
		function e(a, b, c) {
			const d = a[b == null ? 0 : b + 1];
			if (d && d.type === 'ContentStatement' && (c || !d.rightStripped)) {
				const e = d.value;
				(d.value = d.value.replace(c ? /^\s+/ : /^[ \t]*\r?\n?/, '')),
					(d.rightStripped = d.value !== e);
			}
		}
		function f(a, b, c) {
			const d = a[b == null ? a.length - 1 : b - 1];
			if (d && d.type === 'ContentStatement' && (c || !d.leftStripped)) {
				const e = d.value;
				return (
					(d.value = d.value.replace(c ? /\s+$/ : /[ \t]+$/, '')),
					(d.leftStripped = d.value !== e),
					d.leftStripped
				);
			}
		}
		let g;
		const h = a;
		return (
			(b.prototype = new h()),
			(b.prototype.Program = function (a) {
				const b = !this.isRootSeen;
				this.isRootSeen = !0;
				for (let g = a.body, h = 0, i = g.length; i > h; h++) {
					const j = g[h];
					const k = this.accept(j);
					if (k) {
						const l = c(g, h, b);
						const m = d(g, h, b);
						const n = k.openStandalone && l;
						const o = k.closeStandalone && m;
						const p = k.inlineStandalone && l && m;
						k.close && e(g, h, !0),
							k.open && f(g, h, !0),
							p &&
								(e(g, h),
								f(g, h) &&
									j.type === 'PartialStatement' &&
									(j.indent = /([ \t]+$)/.exec(g[h - 1].original)[1])),
							n && (e((j.program || j.inverse).body), f(g, h)),
							o && (e(g, h), f((j.inverse || j.program).body));
					}
				}
				return a;
			}),
			(b.prototype.BlockStatement = function (a) {
				this.accept(a.program), this.accept(a.inverse);
				const b = a.program || a.inverse;
				const g = a.program && a.inverse;
				let h = g;
				let i = g;
				if (g && g.chained)
					for (h = g.body[0].program; i.chained; ) i = i.body[i.body.length - 1].program;
				const j = {
					open: a.openStrip.open,
					close: a.closeStrip.close,
					openStandalone: d(b.body),
					closeStandalone: c((h || b).body),
				};
				if ((a.openStrip.close && e(b.body, null, !0), g)) {
					const k = a.inverseStrip;
					k.open && f(b.body, null, !0),
						k.close && e(h.body, null, !0),
						a.closeStrip.open && f(i.body, null, !0),
						c(b.body) && d(h.body) && (f(b.body), e(h.body));
				} else a.closeStrip.open && f(b.body, null, !0);
				return j;
			}),
			(b.prototype.MustacheStatement = function (a) {
				return a.strip;
			}),
			(b.prototype.PartialStatement = b.prototype.CommentStatement =
				function (a) {
					const b = a.strip || {};
					return { inlineStandalone: !0, open: b.open, close: b.close };
				}),
			(g = b)
		);
	})(i);
	const k = (function (a) {
		function b(a, b) {
			(this.source = a),
				(this.start = { line: b.first_line, column: b.first_column }),
				(this.end = { line: b.last_line, column: b.last_column });
		}
		function c(a, b) {
			return { open: a.charAt(2) === '~', close: b.charAt(b.length - 3) === '~' };
		}
		function d(a) {
			return a.replace(/^\{\{~?\!-?-?/, '').replace(/-?-?~?\}\}$/, '');
		}
		function e(a, b, c) {
			c = this.locInfo(c);
			for (var d = a ? '@' : '', e = [], f = 0, g = '', h = 0, i = b.length; i > h; h++) {
				const k = b[h].part;
				if (((d += (b[h].separator || '') + k), k === '..' || k === '.' || k === 'this')) {
					if (e.length > 0) throw new j(`Invalid path: ${d}`, { loc: c });
					k === '..' && (f++, (g += '../'));
				} else e.push(k);
			}
			return new this.PathExpression(a, f, e, d, c);
		}
		function f(a, b, c, d, e, f) {
			const g = d.charAt(3) || d.charAt(2);
			const h = g !== '{' && g !== '&';
			return new this.MustacheStatement(a, b, c, h, e, this.locInfo(f));
		}
		function g(a, b, c, d) {
			if (a.path.original !== c) {
				const e = { loc: a.path.loc };
				throw new j(`${a.path.original} doesn't match ${c}`, e);
			}
			d = this.locInfo(d);
			const f = new this.Program([b], null, {}, d);
			return new this.BlockStatement(a.path, a.params, a.hash, f, void 0, {}, {}, {}, d);
		}
		function h(a, b, c, d, e, f) {
			if (d && d.path && a.path.original !== d.path.original) {
				const g = { loc: a.path.loc };
				throw new j(`${a.path.original} doesn't match ${d.path.original}`, g);
			}
			b.blockParams = a.blockParams;
			let h;
			let i;
			return (
				c && (c.chain && (c.program.body[0].closeStrip = d.strip), (i = c.strip), (h = c.program)),
				e && ((e = h), (h = b), (b = e)),
				new this.BlockStatement(
					a.path,
					a.params,
					a.hash,
					b,
					h,
					a.strip,
					i,
					d && d.strip,
					this.locInfo(f)
				)
			);
		}
		const i = {};
		var j = a;
		return (
			(i.SourceLocation = b),
			(i.stripFlags = c),
			(i.stripComment = d),
			(i.preparePath = e),
			(i.prepareMustache = f),
			(i.prepareRawBlock = g),
			(i.prepareBlock = h),
			i
		);
	})(b);
	const l = (function (a, b, c, d, e) {
		function f(a, b) {
			if (a.type === 'Program') return a;
			(h.yy = m),
				(m.locInfo = function (a) {
					return new m.SourceLocation(b && b.srcName, a);
				});
			const c = new j();
			return c.accept(h.parse(a));
		}
		const g = {};
		var h = a;
		const i = b;
		var j = c;
		const k = d;
		const l = e.extend;
		g.parser = h;
		var m = {};
		return l(m, k, i), (g.parse = f), g;
	})(h, g, j, k, a);
	const m = (function (a, b, c) {
		function d() {}
		function e(a, b, c) {
			if (a == null || (typeof a !== 'string' && a.type !== 'Program'))
				throw new j(
					`You must pass a string or Handlebars AST to Handlebars.precompile. You passed ${a}`
				);
			(b = b || {}), 'data' in b || (b.data = !0), b.compat && (b.useDepths = !0);
			const d = c.parse(a, b);
			const e = new c.Compiler().compile(d, b);
			return new c.JavaScriptCompiler().compile(e, b);
		}
		function f(a, b, c) {
			function d() {
				const d = c.parse(a, b);
				const e = new c.Compiler().compile(d, b);
				const f = new c.JavaScriptCompiler().compile(e, b, void 0, !0);
				return c.template(f);
			}
			if (a == null || (typeof a !== 'string' && a.type !== 'Program'))
				throw new j(
					`You must pass a string or Handlebars AST to Handlebars.compile. You passed ${a}`
				);
			(b = b || {}), 'data' in b || (b.data = !0), b.compat && (b.useDepths = !0);
			let e;
			const f = function (a, b) {
				return e || (e = d()), e.call(this, a, b);
			};
			return (
				(f._setup = function (a) {
					return e || (e = d()), e._setup(a);
				}),
				(f._child = function (a, b, c, f) {
					return e || (e = d()), e._child(a, b, c, f);
				}),
				f
			);
		}
		function g(a, b) {
			if (a === b) return !0;
			if (k(a) && k(b) && a.length === b.length) {
				for (let c = 0; c < a.length; c++) if (!g(a[c], b[c])) return !1;
				return !0;
			}
		}
		function h(a) {
			if (!a.path.parts) {
				const b = a.path;
				a.path = new m.PathExpression(!1, 0, [`${b.original}`], `${b.original}`, b.loc);
			}
		}
		const i = {};
		var j = a;
		var k = b.isArray;
		const l = b.indexOf;
		var m = c;
		const n = [].slice;
		return (
			(i.Compiler = d),
			(d.prototype = {
				compiler: d,
				equals(a) {
					let b = this.opcodes.length;
					if (a.opcodes.length !== b) return !1;
					for (var c = 0; b > c; c++) {
						const d = this.opcodes[c];
						const e = a.opcodes[c];
						if (d.opcode !== e.opcode || !g(d.args, e.args)) return !1;
					}
					for (b = this.children.length, c = 0; b > c; c++)
						if (!this.children[c].equals(a.children[c])) return !1;
					return !0;
				},
				guid: 0,
				compile(a, b) {
					(this.sourceNode = []),
						(this.opcodes = []),
						(this.children = []),
						(this.options = b),
						(this.stringParams = b.stringParams),
						(this.trackIds = b.trackIds),
						(b.blockParams = b.blockParams || []);
					const c = b.knownHelpers;
					if (
						((b.knownHelpers = {
							helperMissing: !0,
							blockHelperMissing: !0,
							each: !0,
							if: !0,
							unless: !0,
							with: !0,
							log: !0,
							lookup: !0,
						}),
						c)
					)
						for (const d in c) b.knownHelpers[d] = c[d];
					return this.accept(a);
				},
				compileProgram(a) {
					const b = new this.compiler().compile(a, this.options);
					const c = this.guid++;
					return (
						(this.usePartial = this.usePartial || b.usePartial),
						(this.children[c] = b),
						(this.useDepths = this.useDepths || b.useDepths),
						c
					);
				},
				accept(a) {
					this.sourceNode.unshift(a);
					const b = this[a.type](a);
					return this.sourceNode.shift(), b;
				},
				Program(a) {
					this.options.blockParams.unshift(a.blockParams);
					for (var b = a.body, c = 0, d = b.length; d > c; c++) this.accept(b[c]);
					return (
						this.options.blockParams.shift(),
						(this.isSimple = d === 1),
						(this.blockParams = a.blockParams ? a.blockParams.length : 0),
						this
					);
				},
				BlockStatement(a) {
					h(a);
					let b = a.program;
					let c = a.inverse;
					(b = b && this.compileProgram(b)), (c = c && this.compileProgram(c));
					const d = this.classifySexpr(a);
					d === 'helper'
						? this.helperSexpr(a, b, c)
						: d === 'simple'
						? (this.simpleSexpr(a),
						  this.opcode('pushProgram', b),
						  this.opcode('pushProgram', c),
						  this.opcode('emptyHash'),
						  this.opcode('blockValue', a.path.original))
						: (this.ambiguousSexpr(a, b, c),
						  this.opcode('pushProgram', b),
						  this.opcode('pushProgram', c),
						  this.opcode('emptyHash'),
						  this.opcode('ambiguousBlockValue')),
						this.opcode('append');
				},
				PartialStatement(a) {
					this.usePartial = !0;
					const b = a.params;
					if (b.length > 1) throw new j(`Unsupported number of partial arguments: ${b.length}`, a);
					b.length || b.push({ type: 'PathExpression', parts: [], depth: 0 });
					const c = a.name.original;
					const d = a.name.type === 'SubExpression';
					d && this.accept(a.name), this.setupFullMustacheParams(a, void 0, void 0, !0);
					let e = a.indent || '';
					this.options.preventIndent && e && (this.opcode('appendContent', e), (e = '')),
						this.opcode('invokePartial', d, c, e),
						this.opcode('append');
				},
				MustacheStatement(a) {
					this.SubExpression(a),
						this.opcode(a.escaped && !this.options.noEscape ? 'appendEscaped' : 'append');
				},
				ContentStatement(a) {
					a.value && this.opcode('appendContent', a.value);
				},
				CommentStatement() {},
				SubExpression(a) {
					h(a);
					const b = this.classifySexpr(a);
					b === 'simple'
						? this.simpleSexpr(a)
						: b === 'helper'
						? this.helperSexpr(a)
						: this.ambiguousSexpr(a);
				},
				ambiguousSexpr(a, b, c) {
					const d = a.path;
					const e = d.parts[0];
					const f = b != null || c != null;
					this.opcode('getContext', d.depth),
						this.opcode('pushProgram', b),
						this.opcode('pushProgram', c),
						this.accept(d),
						this.opcode('invokeAmbiguous', e, f);
				},
				simpleSexpr(a) {
					this.accept(a.path), this.opcode('resolvePossibleLambda');
				},
				helperSexpr(a, b, c) {
					const d = this.setupFullMustacheParams(a, b, c);
					const e = a.path;
					const f = e.parts[0];
					if (this.options.knownHelpers[f]) this.opcode('invokeKnownHelper', d.length, f);
					else {
						if (this.options.knownHelpersOnly)
							throw new j(`You specified knownHelpersOnly, but used the unknown helper ${f}`, a);
						(e.falsy = !0),
							this.accept(e),
							this.opcode('invokeHelper', d.length, e.original, m.helpers.simpleId(e));
					}
				},
				PathExpression(a) {
					this.addDepth(a.depth), this.opcode('getContext', a.depth);
					const b = a.parts[0];
					const c = m.helpers.scopedId(a);
					const d = !a.depth && !c && this.blockParamIndex(b);
					d
						? this.opcode('lookupBlockParam', d, a.parts)
						: b
						? a.data
							? ((this.options.data = !0), this.opcode('lookupData', a.depth, a.parts))
							: this.opcode('lookupOnContext', a.parts, a.falsy, c)
						: this.opcode('pushContext');
				},
				StringLiteral(a) {
					this.opcode('pushString', a.value);
				},
				NumberLiteral(a) {
					this.opcode('pushLiteral', a.value);
				},
				BooleanLiteral(a) {
					this.opcode('pushLiteral', a.value);
				},
				Hash(a) {
					let b;
					let c;
					const d = a.pairs;
					for (this.opcode('pushHash'), b = 0, c = d.length; c > b; b++) this.pushParam(d[b].value);
					for (; b--; ) this.opcode('assignToHash', d[b].key);
					this.opcode('popHash');
				},
				opcode(a) {
					this.opcodes.push({
						opcode: a,
						args: n.call(arguments, 1),
						loc: this.sourceNode[0].loc,
					});
				},
				addDepth(a) {
					a && (this.useDepths = !0);
				},
				classifySexpr(a) {
					const b = m.helpers.simpleId(a.path);
					const c = b && !!this.blockParamIndex(a.path.parts[0]);
					let d = !c && m.helpers.helperExpression(a);
					let e = !c && (d || b);
					const f = this.options;
					if (e && !d) {
						const g = a.path.parts[0];
						f.knownHelpers[g] ? (d = !0) : f.knownHelpersOnly && (e = !1);
					}
					return d ? 'helper' : e ? 'ambiguous' : 'simple';
				},
				pushParams(a) {
					for (let b = 0, c = a.length; c > b; b++) this.pushParam(a[b]);
				},
				pushParam(a) {
					let b = a.value != null ? a.value : a.original || '';
					if (this.stringParams)
						b.replace && (b = b.replace(/^(\.?\.\/)*/g, '').replace(/\//g, '.')),
							a.depth && this.addDepth(a.depth),
							this.opcode('getContext', a.depth || 0),
							this.opcode('pushStringParam', b, a.type),
							a.type === 'SubExpression' && this.accept(a);
					else {
						if (this.trackIds) {
							let c;
							if (
								(!a.parts ||
									m.helpers.scopedId(a) ||
									a.depth ||
									(c = this.blockParamIndex(a.parts[0])),
								c)
							) {
								const d = a.parts.slice(1).join('.');
								this.opcode('pushId', 'BlockParam', c, d);
							} else
								(b = a.original || b),
									b.replace && (b = b.replace(/^\.\//g, '').replace(/^\.$/g, '')),
									this.opcode('pushId', a.type, b);
						}
						this.accept(a);
					}
				},
				setupFullMustacheParams(a, b, c, d) {
					const e = a.params;
					return (
						this.pushParams(e),
						this.opcode('pushProgram', b),
						this.opcode('pushProgram', c),
						a.hash ? this.accept(a.hash) : this.opcode('emptyHash', d),
						e
					);
				},
				blockParamIndex(a) {
					for (let b = 0, c = this.options.blockParams.length; c > b; b++) {
						const d = this.options.blockParams[b];
						const e = d && l(d, a);
						if (d && e >= 0) return [b, e];
					}
				},
			}),
			(i.precompile = e),
			(i.compile = f),
			i
		);
	})(b, a, g);
	const n = (function (a) {
		function b(a, b, c) {
			if (e(a)) {
				for (var d = [], f = 0, g = a.length; g > f; f++) d.push(b.wrap(a[f], c));
				return d;
			}
			return typeof a === 'boolean' || typeof a === 'number' ? `${a}` : a;
		}
		function c(a) {
			(this.srcFile = a), (this.source = []);
		}
		let d;
		var e = a.isArray;
		try {
			const f = require('source-map');
			var g = f.SourceNode;
		} catch (h) {
			(g = function (a, b, c, d) {
				(this.src = ''), d && this.add(d);
			}),
				(g.prototype = {
					add(a) {
						e(a) && (a = a.join('')), (this.src += a);
					},
					prepend(a) {
						e(a) && (a = a.join('')), (this.src = a + this.src);
					},
					toStringWithSourceMap() {
						return { code: this.toString() };
					},
					toString() {
						return this.src;
					},
				});
		}
		return (
			(c.prototype = {
				prepend(a, b) {
					this.source.unshift(this.wrap(a, b));
				},
				push(a, b) {
					this.source.push(this.wrap(a, b));
				},
				merge() {
					const a = this.empty();
					return (
						this.each(b => {
							a.add(['  ', b, '\n']);
						}),
						a
					);
				},
				each(a) {
					for (let b = 0, c = this.source.length; c > b; b++) a(this.source[b]);
				},
				empty(a) {
					return (
						(a = a || this.currentLocation || { start: {} }),
						new g(a.start.line, a.start.column, this.srcFile)
					);
				},
				wrap(a, c) {
					return a instanceof g
						? a
						: ((c = c || this.currentLocation || { start: {} }),
						  (a = b(a, this, c)),
						  new g(c.start.line, c.start.column, this.srcFile, a));
				},
				functionCall(a, b, c) {
					return (c = this.generateList(c)), this.wrap([a, b ? `.${b}(` : '(', c, ')']);
				},
				quotedString(a) {
					return `"${`${a}`
						.replace(/\\/g, '\\\\')
						.replace(/"/g, '\\"')
						.replace(/\n/g, '\\n')
						.replace(/\r/g, '\\r')
						.replace(/\u2028/g, '\\u2028')
						.replace(/\u2029/g, '\\u2029')}"`;
				},
				objectLiteral(a) {
					const c = [];
					for (const d in a)
						if (a.hasOwnProperty(d)) {
							const e = b(a[d], this);
							e !== 'undefined' && c.push([this.quotedString(d), ':', e]);
						}
					const f = this.generateList(c);
					return f.prepend('{'), f.add('}'), f;
				},
				generateList(a, c) {
					for (var d = this.empty(c), e = 0, f = a.length; f > e; e++)
						e && d.add(','), d.add(b(a[e], this, c));
					return d;
				},
				generateArray(a, b) {
					const c = this.generateList(a, b);
					return c.prepend('['), c.add(']'), c;
				},
			}),
			(d = c)
		);
	})(a);
	const o = (function (a, b, c, d) {
		function e(a) {
			this.value = a;
		}
		function f() {}
		function g(a, b, c, d) {
			let e = b.popStack();
			let f = 0;
			let g = c.length;
			for (a && g--; g > f; f++) e = b.nameLookup(e, c[f], d);
			return a ? [b.aliasable('this.strict'), '(', e, ', ', b.quotedString(c[f]), ')'] : e;
		}
		let h;
		const i = a.COMPILER_REVISION;
		const j = a.REVISION_CHANGES;
		const k = b;
		const l = c.isArray;
		const m = d;
		f.prototype = {
			nameLookup(a, b) {
				return f.isValidJavaScriptVariableName(b) ? [a, '.', b] : [a, "['", b, "']"];
			},
			depthedLookup(a) {
				return [this.aliasable('this.lookup'), '(depths, "', a, '")'];
			},
			compilerInfo() {
				const a = i;
				const b = j[a];
				return [a, b];
			},
			appendToBuffer(a, b, c) {
				return (
					l(a) || (a = [a]),
					(a = this.source.wrap(a, b)),
					this.environment.isSimple
						? ['return ', a, ';']
						: c
						? ['buffer += ', a, ';']
						: ((a.appendToBuffer = !0), a)
				);
			},
			initializeBuffer() {
				return this.quotedString('');
			},
			compile(a, b, c, d) {
				(this.environment = a),
					(this.options = b),
					(this.stringParams = this.options.stringParams),
					(this.trackIds = this.options.trackIds),
					(this.precompile = !d),
					(this.name = this.environment.name),
					(this.isChild = !!c),
					(this.context = c || { programs: [], environments: [] }),
					this.preamble(),
					(this.stackSlot = 0),
					(this.stackVars = []),
					(this.aliases = {}),
					(this.registers = { list: [] }),
					(this.hashes = []),
					(this.compileStack = []),
					(this.inlineStack = []),
					(this.blockParams = []),
					this.compileChildren(a, b),
					(this.useDepths = this.useDepths || a.useDepths || this.options.compat),
					(this.useBlockParams = this.useBlockParams || a.useBlockParams);
				let e;
				let f;
				let g;
				let h;
				const i = a.opcodes;
				for (g = 0, h = i.length; h > g; g++)
					(e = i[g]),
						(this.source.currentLocation = e.loc),
						(f = f || e.loc),
						this[e.opcode].apply(this, e.args);
				if (
					((this.source.currentLocation = f),
					this.pushSource(''),
					this.stackSlot || this.inlineStack.length || this.compileStack.length)
				)
					throw new k('Compile completed with content left on stack');
				const j = this.createFunctionContext(d);
				if (this.isChild) return j;
				let l = { compiler: this.compilerInfo(), main: j };
				const m = this.context.programs;
				for (g = 0, h = m.length; h > g; g++) m[g] && (l[g] = m[g]);
				return (
					this.environment.usePartial && (l.usePartial = !0),
					this.options.data && (l.useData = !0),
					this.useDepths && (l.useDepths = !0),
					this.useBlockParams && (l.useBlockParams = !0),
					this.options.compat && (l.compat = !0),
					d
						? (l.compilerOptions = this.options)
						: ((l.compiler = JSON.stringify(l.compiler)),
						  (this.source.currentLocation = { start: { line: 1, column: 0 } }),
						  (l = this.objectLiteral(l)),
						  b.srcName
								? ((l = l.toStringWithSourceMap({ file: b.destName })),
								  (l.map = l.map && l.map.toString()))
								: (l = l.toString())),
					l
				);
			},
			preamble() {
				(this.lastContext = 0), (this.source = new m(this.options.srcName));
			},
			createFunctionContext(a) {
				let b = '';
				const c = this.stackVars.concat(this.registers.list);
				c.length > 0 && (b += `, ${c.join(', ')}`);
				let d = 0;
				for (const e in this.aliases) {
					const f = this.aliases[e];
					this.aliases.hasOwnProperty(e) &&
						f.children &&
						f.referenceCount > 1 &&
						((b += `, alias${++d}=${e}`), (f.children[0] = `alias${d}`));
				}
				const g = ['depth0', 'helpers', 'partials', 'data'];
				(this.useBlockParams || this.useDepths) && g.push('blockParams'),
					this.useDepths && g.push('depths');
				const h = this.mergeSource(b);
				return a
					? (g.push(h), Function.apply(this, g))
					: this.source.wrap(['function(', g.join(','), ') {\n  ', h, '}']);
			},
			mergeSource(a) {
				let b;
				let c;
				let d;
				let e;
				const f = this.environment.isSimple;
				let g = !this.forceBuffer;
				return (
					this.source.each(a => {
						a.appendToBuffer
							? (d ? a.prepend('  + ') : (d = a), (e = a))
							: (d && (c ? d.prepend('buffer += ') : (b = !0), e.add(';'), (d = e = void 0)),
							  (c = !0),
							  f || (g = !1));
					}),
					g
						? d
							? (d.prepend('return '), e.add(';'))
							: c || this.source.push('return "";')
						: ((a += `, buffer = ${b ? '' : this.initializeBuffer()}`),
						  d ? (d.prepend('return buffer + '), e.add(';')) : this.source.push('return buffer;')),
					a && this.source.prepend(`var ${a.substring(2)}${b ? '' : ';\n'}`),
					this.source.merge()
				);
			},
			blockValue(a) {
				const b = this.aliasable('helpers.blockHelperMissing');
				const c = [this.contextName(0)];
				this.setupHelperArgs(a, 0, c);
				const d = this.popStack();
				c.splice(1, 0, d), this.push(this.source.functionCall(b, 'call', c));
			},
			ambiguousBlockValue() {
				const a = this.aliasable('helpers.blockHelperMissing');
				const b = [this.contextName(0)];
				this.setupHelperArgs('', 0, b, !0), this.flushInline();
				const c = this.topStack();
				b.splice(1, 0, c),
					this.pushSource([
						'if (!',
						this.lastHelper,
						') { ',
						c,
						' = ',
						this.source.functionCall(a, 'call', b),
						'}',
					]);
			},
			appendContent(a) {
				this.pendingContent
					? (a = this.pendingContent + a)
					: (this.pendingLocation = this.source.currentLocation),
					(this.pendingContent = a);
			},
			append() {
				if (this.isInline())
					this.replaceStack(a => [' != null ? ', a, ' : ""']),
						this.pushSource(this.appendToBuffer(this.popStack()));
				else {
					const a = this.popStack();
					this.pushSource(['if (', a, ' != null) { ', this.appendToBuffer(a, void 0, !0), ' }']),
						this.environment.isSimple &&
							this.pushSource(['else { ', this.appendToBuffer("''", void 0, !0), ' }']);
				}
			},
			appendEscaped() {
				this.pushSource(
					this.appendToBuffer([this.aliasable('this.escapeExpression'), '(', this.popStack(), ')'])
				);
			},
			getContext(a) {
				this.lastContext = a;
			},
			pushContext() {
				this.pushStackLiteral(this.contextName(this.lastContext));
			},
			lookupOnContext(a, b, c) {
				let d = 0;
				c || !this.options.compat || this.lastContext
					? this.pushContext()
					: this.push(this.depthedLookup(a[d++])),
					this.resolvePath('context', a, d, b);
			},
			lookupBlockParam(a, b) {
				(this.useBlockParams = !0),
					this.push(['blockParams[', a[0], '][', a[1], ']']),
					this.resolvePath('context', b, 1);
			},
			lookupData(a, b) {
				this.pushStackLiteral(a ? `this.data(data, ${a})` : 'data'),
					this.resolvePath('data', b, 0, !0);
			},
			resolvePath(a, b, c, d) {
				if (this.options.strict || this.options.assumeObjects)
					return void this.push(g(this.options.strict, this, b, a));
				for (let e = b.length; e > c; c++)
					this.replaceStack(function (e) {
						const f = this.nameLookup(e, b[c], a);
						return d ? [' && ', f] : [' != null ? ', f, ' : ', e];
					});
			},
			resolvePossibleLambda() {
				this.push([
					this.aliasable('this.lambda'),
					'(',
					this.popStack(),
					', ',
					this.contextName(0),
					')',
				]);
			},
			pushStringParam(a, b) {
				this.pushContext(),
					this.pushString(b),
					b !== 'SubExpression' &&
						(typeof a === 'string' ? this.pushString(a) : this.pushStackLiteral(a));
			},
			emptyHash(a) {
				this.trackIds && this.push('{}'),
					this.stringParams && (this.push('{}'), this.push('{}')),
					this.pushStackLiteral(a ? 'undefined' : '{}');
			},
			pushHash() {
				this.hash && this.hashes.push(this.hash),
					(this.hash = { values: [], types: [], contexts: [], ids: [] });
			},
			popHash() {
				const a = this.hash;
				(this.hash = this.hashes.pop()),
					this.trackIds && this.push(this.objectLiteral(a.ids)),
					this.stringParams &&
						(this.push(this.objectLiteral(a.contexts)), this.push(this.objectLiteral(a.types))),
					this.push(this.objectLiteral(a.values));
			},
			pushString(a) {
				this.pushStackLiteral(this.quotedString(a));
			},
			pushLiteral(a) {
				this.pushStackLiteral(a);
			},
			pushProgram(a) {
				this.pushStackLiteral(a != null ? this.programExpression(a) : null);
			},
			invokeHelper(a, b, c) {
				const d = this.popStack();
				const e = this.setupHelper(a, b);
				const f = c ? [e.name, ' || '] : '';
				const g = ['('].concat(f, d);
				this.options.strict || g.push(' || ', this.aliasable('helpers.helperMissing')),
					g.push(')'),
					this.push(this.source.functionCall(g, 'call', e.callParams));
			},
			invokeKnownHelper(a, b) {
				const c = this.setupHelper(a, b);
				this.push(this.source.functionCall(c.name, 'call', c.callParams));
			},
			invokeAmbiguous(a, b) {
				this.useRegister('helper');
				const c = this.popStack();
				this.emptyHash();
				const d = this.setupHelper(0, a, b);
				const e = (this.lastHelper = this.nameLookup('helpers', a, 'helper'));
				const f = ['(', '(helper = ', e, ' || ', c, ')'];
				this.options.strict ||
					((f[0] = '(helper = '),
					f.push(' != null ? helper : ', this.aliasable('helpers.helperMissing'))),
					this.push([
						'(',
						f,
						d.paramsInit ? ['),(', d.paramsInit] : [],
						'),',
						'(typeof helper === ',
						this.aliasable('"function"'),
						' ? ',
						this.source.functionCall('helper', 'call', d.callParams),
						' : helper))',
					]);
			},
			invokePartial(a, b, c) {
				const d = [];
				let e = this.setupParams(b, 1, d, !1);
				a && ((b = this.popStack()), delete e.name),
					c && (e.indent = JSON.stringify(c)),
					(e.helpers = 'helpers'),
					(e.partials = 'partials'),
					d.unshift(a ? b : this.nameLookup('partials', b, 'partial')),
					this.options.compat && (e.depths = 'depths'),
					(e = this.objectLiteral(e)),
					d.push(e),
					this.push(this.source.functionCall('this.invokePartial', '', d));
			},
			assignToHash(a) {
				let b;
				let c;
				let d;
				const e = this.popStack();
				this.trackIds && (d = this.popStack()),
					this.stringParams && ((c = this.popStack()), (b = this.popStack()));
				const f = this.hash;
				b && (f.contexts[a] = b), c && (f.types[a] = c), d && (f.ids[a] = d), (f.values[a] = e);
			},
			pushId(a, b, c) {
				a === 'BlockParam'
					? this.pushStackLiteral(
							`blockParams[${b[0]}].path[${b[1]}]${c ? ` + ${JSON.stringify(`.${c}`)}` : ''}`
					  )
					: a === 'PathExpression'
					? this.pushString(b)
					: this.pushStackLiteral(a === 'SubExpression' ? 'true' : 'null');
			},
			compiler: f,
			compileChildren(a, b) {
				for (var c, d, e = a.children, f = 0, g = e.length; g > f; f++) {
					(c = e[f]), (d = new this.compiler());
					let h = this.matchExistingProgram(c);
					h == null
						? (this.context.programs.push(''),
						  (h = this.context.programs.length),
						  (c.index = h),
						  (c.name = `program${h}`),
						  (this.context.programs[h] = d.compile(c, b, this.context, !this.precompile)),
						  (this.context.environments[h] = c),
						  (this.useDepths = this.useDepths || d.useDepths),
						  (this.useBlockParams = this.useBlockParams || d.useBlockParams))
						: ((c.index = h),
						  (c.name = `program${h}`),
						  (this.useDepths = this.useDepths || c.useDepths),
						  (this.useBlockParams = this.useBlockParams || c.useBlockParams));
				}
			},
			matchExistingProgram(a) {
				for (let b = 0, c = this.context.environments.length; c > b; b++) {
					const d = this.context.environments[b];
					if (d && d.equals(a)) return b;
				}
			},
			programExpression(a) {
				const b = this.environment.children[a];
				const c = [b.index, 'data', b.blockParams];
				return (
					(this.useBlockParams || this.useDepths) && c.push('blockParams'),
					this.useDepths && c.push('depths'),
					`this.program(${c.join(', ')})`
				);
			},
			useRegister(a) {
				this.registers[a] || ((this.registers[a] = !0), this.registers.list.push(a));
			},
			push(a) {
				return a instanceof e || (a = this.source.wrap(a)), this.inlineStack.push(a), a;
			},
			pushStackLiteral(a) {
				this.push(new e(a));
			},
			pushSource(a) {
				this.pendingContent &&
					(this.source.push(
						this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation)
					),
					(this.pendingContent = void 0)),
					a && this.source.push(a);
			},
			replaceStack(a) {
				let b;
				let c;
				let d;
				let f = ['('];
				if (!this.isInline()) throw new k('replaceStack on non-inline');
				const g = this.popStack(!0);
				if (g instanceof e) (b = [g.value]), (f = ['(', b]), (d = !0);
				else {
					c = !0;
					const h = this.incrStack();
					(f = ['((', this.push(h), ' = ', g, ')']), (b = this.topStack());
				}
				const i = a.call(this, b);
				d || this.popStack(), c && this.stackSlot--, this.push(f.concat(i, ')'));
			},
			incrStack() {
				return (
					this.stackSlot++,
					this.stackSlot > this.stackVars.length && this.stackVars.push(`stack${this.stackSlot}`),
					this.topStackName()
				);
			},
			topStackName() {
				return `stack${this.stackSlot}`;
			},
			flushInline() {
				const a = this.inlineStack;
				this.inlineStack = [];
				for (let b = 0, c = a.length; c > b; b++) {
					const d = a[b];
					if (d instanceof e) this.compileStack.push(d);
					else {
						const f = this.incrStack();
						this.pushSource([f, ' = ', d, ';']), this.compileStack.push(f);
					}
				}
			},
			isInline() {
				return this.inlineStack.length;
			},
			popStack(a) {
				const b = this.isInline();
				const c = (b ? this.inlineStack : this.compileStack).pop();
				if (!a && c instanceof e) return c.value;
				if (!b) {
					if (!this.stackSlot) throw new k('Invalid stack pop');
					this.stackSlot--;
				}
				return c;
			},
			topStack() {
				const a = this.isInline() ? this.inlineStack : this.compileStack;
				const b = a[a.length - 1];
				return b instanceof e ? b.value : b;
			},
			contextName(a) {
				return this.useDepths && a ? `depths[${a}]` : `depth${a}`;
			},
			quotedString(a) {
				return this.source.quotedString(a);
			},
			objectLiteral(a) {
				return this.source.objectLiteral(a);
			},
			aliasable(a) {
				let b = this.aliases[a];
				return b
					? (b.referenceCount++, b)
					: ((b = this.aliases[a] = this.source.wrap(a)),
					  (b.aliasable = !0),
					  (b.referenceCount = 1),
					  b);
			},
			setupHelper(a, b, c) {
				const d = [];
				const e = this.setupHelperArgs(b, a, d, c);
				const f = this.nameLookup('helpers', b, 'helper');
				return { params: d, paramsInit: e, name: f, callParams: [this.contextName(0)].concat(d) };
			},
			setupParams(a, b, c) {
				let d;
				const e = {};
				const f = [];
				const g = [];
				const h = [];
				(e.name = this.quotedString(a)),
					(e.hash = this.popStack()),
					this.trackIds && (e.hashIds = this.popStack()),
					this.stringParams &&
						((e.hashTypes = this.popStack()), (e.hashContexts = this.popStack()));
				const i = this.popStack();
				const j = this.popStack();
				(j || i) && ((e.fn = j || 'this.noop'), (e.inverse = i || 'this.noop'));
				for (let k = b; k--; )
					(d = this.popStack()),
						(c[k] = d),
						this.trackIds && (h[k] = this.popStack()),
						this.stringParams && ((g[k] = this.popStack()), (f[k] = this.popStack()));
				return (
					this.trackIds && (e.ids = this.source.generateArray(h)),
					this.stringParams &&
						((e.types = this.source.generateArray(g)), (e.contexts = this.source.generateArray(f))),
					this.options.data && (e.data = 'data'),
					this.useBlockParams && (e.blockParams = 'blockParams'),
					e
				);
			},
			setupHelperArgs(a, b, c, d) {
				let e = this.setupParams(a, b, c, !0);
				return (
					(e = this.objectLiteral(e)),
					d ? (this.useRegister('options'), c.push('options'), ['options=', e]) : (c.push(e), '')
				);
			},
		};
		for (
			let n =
					'break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield await null true false'.split(
						' '
					),
				o = (f.RESERVED_WORDS = {}),
				p = 0,
				q = n.length;
			q > p;
			p++
		)
			o[n[p]] = !0;
		return (
			(f.isValidJavaScriptVariableName = function (a) {
				return !f.RESERVED_WORDS[a] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(a);
			}),
			(h = f)
		);
	})(c, b, a, n);
	const p = (function (a, b, c, d, e) {
		let f;
		let g = a;
		const h = b;
		const i = c.parser;
		const j = c.parse;
		const k = d.Compiler;
		const l = d.compile;
		const m = d.precompile;
		const n = e;
		const o = g.create;
		const p = function () {
			const a = o();
			return (
				(a.compile = function (b, c) {
					return l(b, c, a);
				}),
				(a.precompile = function (b, c) {
					return m(b, c, a);
				}),
				(a.AST = h),
				(a.Compiler = k),
				(a.JavaScriptCompiler = n),
				(a.Parser = i),
				(a.parse = j),
				a
			);
		};
		(g = p()), (g.create = p);
		const q = typeof global !== 'undefined' ? global : window;
		const r = q.Handlebars;
		return (
			(g.noConflict = function () {
				q.Handlebars === g && (q.Handlebars = r);
			}),
			(g.default = g),
			(f = g)
		);
	})(f, g, l, m, o);
	return p;
});
